<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>读经分享8</title>
    <url>/2020/02/16/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB8/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/20200216213201.png" width=500 height=350></p>
<div class="note success">
            <ul><li>我的嘴决不说非义之言；我的舌也不说诡诈之语。<pre><code>                      (约伯记 27:4 和合本)</code></pre></li><li>那时他看见智慧，而且述说；他坚定，并且查究。他对人说：敬畏主就是智慧；远离恶便是聪明。<pre><code>                      (约伯记 28:27-28 和合本)</code></pre></li><li>智慧人惧怕，就远离恶事；愚妄人却狂傲自恃。<pre><code>                      (箴言 14:16 和合本)</code></pre></li><li>亵慢人煽惑通城；智慧人止息众怒。<pre><code>                      (箴言 29:8 和合本)</code></pre></li></ul>
          </div>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><hr>
<p>分享的第一点就是<code>约伯记27章1-6节</code>,也是约伯内心最真实的表露吧，虽然得不到朋友的理解，又被现实深深地扼住咽喉，自己里面有抱怨，但是内心对神依然有<code>信心</code>和<code>盼望</code>。不知道为什么读后面约伯对那些不义人的<code>咒诅</code>的时候感觉特别好笑(不像诗篇里面的，可能是我主观场景联想吧，哈哈哈)，就像被欺负了，委屈的找家长诉苦一样，哈哈哈哈。。。</p>
<p>分享的第二点就是<code>远离恶</code>,为什么想分享这点呢，是因为最近接收了太多<code>恶</code>的讯息，感觉自己里面也多了很多不好的东西，读到约伯记中说的<code>远离恶便是聪明</code>的时候,就感觉到有时候可能真的就像那些被<code>牵着鼻子</code>走的人一样。今天查圣经的时候，真的感觉箴言怎么这么<code>真实</code>啊，感觉之前可能真的是走马观花。就像我分享的最后一句一样，<code>智慧人止息众怒</code>，看到这一句感觉真的是对我们每一个人有很大的教导，我们是否真的像那些<code>煽风</code>的·人一样，而没有想着自己可以做些什么改变呢，即使很少，也要去做。就写到这吧，真正的智慧的路还有很长要走啊！！！</p>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享7</title>
    <url>/2020/02/13/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB7/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/IMG_0015.JPG" width=500 height=350></p>
<div class="note success">
            <ul><li>我们一生的年日是七十岁，若是强壮可到八十岁；但其中所矜夸的不过是劳苦愁烦，转眼成空，我们便如飞而去。<pre><code>                                      (诗篇 90:10 和合本)</code></pre></li><li>求你指教我们怎样数算自己的日子，好叫我们得着智慧的心。<pre><code>                                      (诗篇 90:12 和合本)</code></pre></li><li>然而他知道我所行的路；他试炼我之后，我必如精金。<pre><code>                                      (约伯记 23:10 和合本)</code></pre></li></ul>
          </div>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><hr>
<p><strong>诗篇</strong><br>在家待了很多天了，虽然相比之前的假期还算有自己的一部分规划，但感觉还是有点浑浑噩噩的，很多时候都容易被各样琐碎的事情影响自己，现在回想经历的事情，好像真的就像<code>诗篇90章10节</code>那一句一样，剩下的不过<code>劳苦愁烦</code>罢了。仔细想想，数算自己的日子真的很重要，就像每天给自己总结一样，看见自己里面的问题并思考反省，才能让我们更好的认清自己，得着智慧的心。这就让我想起了昨晚的经历，因为恩光说碎觉手机有辐射，我就暂停了自己碎觉戴耳机的这个习惯，但是又发现睡不着，就开始回想这几天自己的经历，一点点的，心里也有了自己的一部分思考。。。</p>
<p>所以，希望大家在自己的生活中也能静下来，给自己一点省察自己的时间，无论是属灵还是自己的生活，都要有自己的思考在里面。Fighting！！！</p>
<p><strong>约伯记</strong><br>今天约伯的回复不再像之前的那种对朋友不理解自己的抱怨了，从今天的回复中，更多看到的是约伯的那种对神的渴慕，其中我分享的这一节<code>他试炼我之后，我必如精金</code>,感觉这一节可能就是整个约伯记得核心了吧，在神的试炼中，不断陶造自己，即使经历了怎样的苦难，也要保守自己的本心，最后在神的那里得着丰盛的恩典。</p>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享6</title>
    <url>/2020/02/11/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB6/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/IMG_0015.JPG" width=500 height=350></p>
<div class="note success">
            <ul><li>主啊，你是有怜悯有恩典的神，不轻易发怒，并有丰盛的慈爱和诚实。<pre><code>                  (诗篇 86:15 和合本)</code></pre></li><li>我这皮肉灭绝之后，我必在肉体之外得见神。<pre><code>                  (约伯记 19:26 和合本)</code></pre></li></ul>
          </div>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><hr>
<p>今天分享一下约伯记19章的一点点看见吧，这一章约伯的回答不再试激烈的辩论，更多的表达的是自己没有得到神<code>回应</code>的痛苦，然后就想到我们自己很多时候也会有这样的感觉，当我们陷入困境需要神帮助的时候，确迟迟没有回应，这往往也是我们每一个生命受影响最经常的情况，那是为什么呢？</p>
<p>很多时候遇到这样情况的时候，我们往往不是像约伯一样，在神的面前<code>撕裂心肠</code>的仰望等候，而是给自己各样的借口，去埋怨生活中的种种，甚至我们的神，想想自己有时候真的也会这样，在神的里面总是给自己找各样的借口，不愿意在神的里面去耐心的等候交托。</p>
<p>其实很多时候，当我们放下一些事，我们的里面也会有不一样的改变，这很多时候就是神的恩典，就像上面分享的<code>你是有怜悯有恩典的神，不轻易发怒，并有丰盛的慈爱和诚实</code>,当我们在患难中的时候，，神会借着各样的事情来帮助我们的，我们不要因为一时的冷落就失去信心。。。。</p>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享5</title>
    <url>/2020/02/10/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB5/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/IMG_0015.JPG" width=500 height=350></p>
<div class="note success">
            <ul><li>他们经过“流泪谷”，叫这谷变为泉源之地；并有秋雨之福盖满了全谷。<pre><code>                                  (诗篇 84:6 和合本)</code></pre></li></ul>
          </div>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><hr>
<p>感觉读约伯记进入了瓶颈，分享不出来东西啦，那今天就分享诗篇84篇<code>我渴慕耶和华的院宇</code>，整段经文从渴慕到朝见再到居住在神的殿中，这章经文真的很美，就像上面我分享的经文一样，当我们渴慕耶和华院宇并定义寻求他的时候，<code>流泪谷</code>也能变成<code>泉源之地</code>,并有<code>秋雨之福</code>覆满全谷。</p>
<p>很多时候感觉我们属灵生命真的就是这样一个寻求到坚固再到委身的一个过程，需要我们在这一路上一点点的去体会去感受，而不是接受灌输，就像我认为的，一个人真正认识神一定要去亲身的去感受和经历，那样的生命才是满有<code>秋雨之福</code>的。</p>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享4</title>
    <url>/2020/02/09/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB4/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/IMG_0015.JPG" width=500 height=350></p>
<div class="note success">
            <ul><li>我也能说你们那样的话；你们若处在我的境遇，我也会联络言语攻击你们，又能向你们摇头。但我必用口坚固你们，用嘴消解你们的忧愁。<pre><code>                              (约伯记 16:4-5 和合本)</code></pre></li></ul>
          </div>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><hr>
<p>接着上次的分享，这次是约伯和来看望他的朋友<code>以利法</code>的对话，从以利法的回复中可以看出，对于上一章约伯的回复，他认为这是对神的悖逆，而不只是言语上的抗拒，我自己读的时候也是很迷惑，感觉就是<code>以利法</code>就站在神的角度去考虑问题，就像<code>人是什么，竟算为洁净呢？妇人所生的是什么，竟算为义呢？(约伯记 15:14 和合本)</code>，这里我也无法反驳他的说法，但是在接下的一章约伯的回答里可以看到，就像上分享的经文一样，我们很多时候考虑问题是不是都是这样，总是站在自己理解的角度，或则随着大流就用附和的言语去攻击别人呢。</p>
<p>从约伯的回答中，有时候真的可以反映大多数人处于那种境地的想法，当自己脆弱无助的时候更需要的可以坚固自己信心的鼓励，而不是一味的责怪嘲笑….</p>
<p>吐槽：这几天读约伯记真的感觉在两种境地中徘徊的感觉，总感觉飘忽不定的方向，不看注释真的难以理解啊。</p>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享3</title>
    <url>/2020/02/08/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB3/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/IMG_0015.JPG" width=500 height=350></p>
<div class="note success">
            <ul><li><p>出来如花，又被割下，飞去如影，不能存留。</p><pre><code>                          (约伯记 14:2 和合本)</code></pre></li><li><p>你们以为可记念的箴言是炉灰的箴言；你们以为可靠的坚垒是淤泥的坚垒。</p><pre><code>                          (约伯记 13:12 和合本)</code></pre></li><li>惟有两件不要向我施行，我就不躲开你的面：<br>就是把你的手缩回，远离我身；又不使你的惊惶威吓我。<pre><code>                          (约伯记 13:20-21 和合本)</code></pre></li></ul>
          </div>
<h3 id="分享"><a href="#分享" class="headerlink" title="分享"></a>分享</h3><hr>
<p>从读<code>约伯记</code>开始，一直给自己一种很空的感觉，平时读的也很随意，很多时候对于约伯那种“固执”很不明白，就像今天读到了，他对于三个朋友的回答中<code>他必杀我；我虽无指望，然而我在他面前还要辩明我所行的。(约伯记 13:15 和合本)</code>开始的时候也很迷惑，前面读到的约伯身上的苦难是神的试炼，那么我们不也一直不也被教导要去顺服吗？看了点解释，发现结合前面的内容，和神试炼的意义就看到了不一样的一点。</p>
<p>首先，三个朋友用一大堆的<code>教义</code>去劝约伯，确没有讲到试炼的意义，也就是神为什么这样做，就像上面分享的第二句一样，神给我们试炼是为了让我们看到自己里面的<code>罪</code>,让我们认识到自己的问题，并在神的面前坦然无惧的悔改，刚强自己，而不是让自己一味的依靠神，而不求自己的长进。</p>
<p>最近看了一句话说<code>时代的一粒灰，落在个人头上，就是一座山</code>,不知道为什么特别想放在这个分享中，很多时候平凡又不平凡的我们在这个时代都在负重前行，我们需要去有约伯的那种<code>不认命</code>,要学会在逆境中去成长，在神的带领下不断提升自己，而不是只做一个只会”顺服”的基督徒。</p>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>新型冠状病毒爆发有感1-责任之爱</title>
    <url>/2020/02/06/%E6%96%B0%E5%9E%8B%E5%86%A0%E7%8A%B6%E7%97%85%E6%AF%92%E7%88%86%E5%8F%91%E6%9C%89%E6%84%9F1-%E8%B4%A3%E4%BB%BB%E4%B9%8B%E7%88%B1/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/EE897BD9-D085-4D81-A4D5-703E7F91E34F_1_105_c.jpeg" width=350 height=600></p>
<div class="note success">
            <p>惟有忍耐到底的，必然得救。<br>                    (马太福音 24:13 和合本)</p>
          </div>
<h3 id="初笔"><a href="#初笔" class="headerlink" title="初笔"></a>初笔</h3><p>不知不觉在家也宅了好久了，从曾经的事事关心到现在的漠然不已，感觉在这个信息爆炸的时代，能够静下来去思考去感悟真的太难了。就像我的读经生活一样，能静下来的时间越来越少，之前想的是晚上读可能效果会好的，实际不过越到后面越懈怠罢了。很多时候都在被各样的信息牵着鼻子走，慢慢变成一个颓废的人罢了，就像我写这篇文章一样，真的想静下来，给自己去思考一些事情的机会。其实这次想写几个方面的，但是太懒了，就先写关于责任方面的吧，毕竟是自己的感觉。</p>
<a id="more"></a>
<h3 id="有感"><a href="#有感" class="headerlink" title="有感"></a>有感</h3><p>提到责任，就要说说这次关于疫情自己的感受了，可能受父母的影响(天天搁家乐呵呵的，像没事人一样)，自己刚开始的时候也没有很在意，甚至还约着武汉的同学说要一起聚餐(不严重之前)，到了后来朋友圈还有家人朋友们的各种消息充斥角交织在一起的时候才让自己意识到事情的严重性。然后就是父母长辈还有朋友们之间的关怀劝导等等之类的消息，虽然自己也没怎么放在心上，但是这种温暖的感觉还是让自己挺舒服的，哈哈哈。尤其是看到自己周围人都开始自觉的做防护措施和关心这次事件，也能够看出大家的那份责任感，无论是对自己还是别人，都是尤为重要的。</p>
<p>至于让自己感动的事情，就要从前几天早晨的微博说起了，受前段时间朋友圈还有微博各种信任危机的文章影响，自己心里面总有种说不出的感觉，可能就是一种消极的情绪吧。不过看了黑门发的一个视频后自己真的感觉到了—温暖是需要自己去选择的，其实就是邓紫棋为灾区写的一首歌<code>平凡天使</code>配的视频。<a href="https://mp.weixin.qq.com/s/s6ptStLYOOtLm8ZNW5T0gQ" target="_blank" rel="noopener"><strong>文章地址</strong></a></p>
<p>可能经历这样的事情，会让我看到很多的问题和很多让人心痛的事情，但是真的依然有很多平凡的天使在为这个国度增添更多的美好，无论是坚守在岗位上的医务人员、警察、解放军战士或是农民工们，相比我们这些只能在家里盯着手机或者电脑的人来说，他们真的值得我们去尊敬。尤其是在看到微博上那些医生们疲惫的身影的时候自己心里也挺不是滋味的，因为去年陪我妈做手术住院的时候，自己因为片面看到的一些事情，一直对医生或者护士们心有芥蒂，包括以前的分享中也提到过，现在想想。。。。</p>
<p>生活中真的需要这样的温暖，我们才能更多的体会到爱的感觉，才能不在这个冰冷的时期让自己的心变得冰冷。</p>
<h3 id="落笔"><a href="#落笔" class="headerlink" title="落笔"></a>落笔</h3><p>其实还有很多话想说出来，但是真的静下心来写长篇大论真的很难对于我来说，希望以后可以坚持吧。</p>
]]></content>
      <categories>
        <category>分享</category>
      </categories>
      <tags>
        <tag>有感</tag>
      </tags>
  </entry>
  <entry>
    <title>细胞分割算法总结</title>
    <url>/2020/02/05/%E7%BB%86%E8%83%9E%E5%88%86%E5%89%B2%E7%AE%97%E6%B3%95%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<h2 id="一、传统方法"><a href="#一、传统方法" class="headerlink" title="一、传统方法"></a>一、传统方法</h2><hr>
<h3 id="1、最大类间阈值法-大津法"><a href="#1、最大类间阈值法-大津法" class="headerlink" title="1、最大类间阈值法(大津法)"></a>1、最大类间阈值法(大津法)</h3><p>原理：</p>
<blockquote>
<p>  大津法又叫最大类间方差法、最大类间阈值法（OTSU）。它的基本思想是，用一个阈值将图像中的数据分为两类，一类中图像的像素点的灰度均小于这个阈值，另一类中的图像的像素点的灰度均大于或者等于该阈值。如果这两个类中像素点的灰度的方差越大，说明获取到的阈值就是最佳的阈值（方差是灰度分布均匀性的一种度量,背景和前景之间的类间方差越大,说明构成图像的两部分的差别越大,当部分前景错分为背景或部分背景错分为前景都会导致两部分差别变小。</p>
</blockquote>
<p>实现思路：</p>
<ul>
<li><p>计算0~255各灰阶对应的像素个数，保存至一个数组中，该数组下标是灰度值，保存内容是当前灰度值对应像素数；</p>
</li>
<li><p>计算背景图像的平均灰度、背景图像像素数所占比例；</p>
</li>
<li><p>计算前景图像的平均灰度、前景图像像素数所占比例；</p>
</li>
<li><p>遍历0~255各灰阶，计算并寻找类间方差极大值；</p>
</li>
</ul>
<h3 id="2、-形态学分水岭算法"><a href="#2、-形态学分水岭算法" class="headerlink" title="2、 形态学分水岭算法"></a>2、 形态学分水岭算法</h3><p>原理：</p>
<blockquote>
<p>分水岭算法(watershed)是一种比较基本的数学形态学分割算法，其基本思想是将灰度图像转换为梯度图像，将梯度值看作高低起伏的山岭，将局部极小值及其邻域看作一个“集水盆”。设想一个个“集水盆”中存在积水，且水位不断升高，淹没梯度较低的地方，当水漫过程停止后，就找出了分割线，图像也就可以被分割成几块连通区域。</p>
</blockquote>
<div class="note ">
            <p><a href="https://blog.csdn.net/weixin_40647819/article/details/90231477" target="_blank" rel="noopener">参考文章</a></p>
          </div>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>分割算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo next 博客优化</title>
    <url>/2020/02/03/Hexo-next-%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/20200203215950.png" alt="三毛"><br><div class="note success">
            <p>一个人至少拥有一个梦想，有一个理由去坚强。心若没有栖息的地方，到哪里都是在流浪。<br>                                                    <p align="right"> — 三毛</p>
          </div></p>
<h2 id="一、文章编写优化"><a href="#一、文章编写优化" class="headerlink" title="一、文章编写优化"></a>一、文章编写优化</h2><hr>
<h3 id="1、题头图片"><a href="#1、题头图片" class="headerlink" title="1、题头图片"></a>1、题头图片</h3><ul>
<li>基础方法(无法定义大小)<br><code>![备注](url)</code></li>
<li>修改图片方法<br><code>&lt;img src=&quot;&quot; width=800 height=800 aligin=right &gt;</code><a id="more"></a>
</li>
</ul>
<h3 id="2、开篇名言"><a href="#2、开篇名言" class="headerlink" title="2、开篇名言"></a>2、开篇名言</h3><ul>
<li>修改<code>custom.styl</code>文件<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 添加<span class="selector-tag">css</span></span><br><span class="line"><span class="selector-class">.note</span><span class="selector-class">.success</span> &#123;</span><br><span class="line">    <span class="attribute">font-family</span>: <span class="string">'Palatino Linotype'</span>, <span class="string">'Book Antiqua'</span>, Palatino, STKaiti, KaiTi, SimKai, DFKai-SB, <span class="string">'Lato'</span>, <span class="string">"PingFang SC"</span>, <span class="string">"Microsoft YaHei"</span>, sans-serif;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="number">#fdf6e3</span>;</span><br><span class="line">    <span class="attribute">border-left-color</span>: <span class="number">#fdf6e3</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写技巧<figure class="highlight routeros"><table><tr><td class="code"><pre><span class="line">&#123;%<span class="built_in"> note </span>success %&#125;</span><br><span class="line">一个人至少拥有一个梦想，有一个理由去坚强。心若没有栖息的地方，到哪里都是在流浪。</span><br><span class="line">                                                    &lt;p <span class="attribute">align</span>=<span class="string">"right"</span>&gt; -- 三毛</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure></li>
<li>另一种方法(可以添加作者来源等)<figure class="highlight django"><table><tr><td class="code"><pre><span class="line"><span class="template-tag">&#123;% <span class="name">blockquote</span> David Levithan, Wide Awake https://lihao6666.cn 欢迎你的到来 %&#125;</span></span><br><span class="line"><span class="xml">Do not just seek happiness for yourself. Seek happiness for all. Through kindness. Through mercy.</span></span><br><span class="line"><span class="template-tag">&#123;% <span class="name">endblockquote</span> %&#125;</span></span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="3、站内链接-跳转站内文章"><a href="#3、站内链接-跳转站内文章" class="headerlink" title="3、站内链接(跳转站内文章)"></a>3、站内链接(跳转站内文章)</h3><ul>
<li>在文章内加入下面片段<figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"><span class="meta"># post_link 先是站内文章名字，然后是显示名字</span></span><br><span class="line">&#123;% post_link Cookie爬取Ajax数据 <span class="string">"爬虫"</span> %&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="4、站外链接-添加渐变"><a href="#4、站外链接-添加渐变" class="headerlink" title="4、站外链接(添加渐变)"></a>4、站外链接(添加渐变)</h3><ul>
<li>修改文件 <code>themes\next\source\css\_common\components\post\post.styl</code><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"># 添加<span class="selector-tag">css</span>代码</span><br><span class="line"><span class="selector-class">.post-body</span> <span class="selector-tag">p</span> <span class="selector-tag">a</span>&#123;</span><br><span class="line">  <span class="attribute">color</span>: <span class="number">#0593d3</span>;</span><br><span class="line">  <span class="attribute">border-bottom</span>: none;</span><br><span class="line">  <span class="attribute">border-bottom</span>: <span class="number">1px</span> solid <span class="number">#0593d3</span>;</span><br><span class="line">  &amp;:hover &#123;</span><br><span class="line">    <span class="selector-tag">color</span>: <span class="selector-id">#fc6423</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: <span class="selector-tag">none</span>;</span><br><span class="line">    <span class="selector-tag">border-bottom</span>: 1<span class="selector-tag">px</span> <span class="selector-tag">solid</span> <span class="selector-id">#fc6423</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li>
<li>编写技巧<br><code>[备注](url)</code> </li>
<li>测试</li>
</ul>
<p><a href="https://lihao6666.cn">李浩的小窝</a></p>
<h3 id="5、强调色-路径文件等"><a href="#5、强调色-路径文件等" class="headerlink" title="5、强调色(路径文件等)"></a>5、强调色(路径文件等)</h3><ul>
<li>修改<code>custom.styl</code>文件<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">code</span> &#123;</span><br><span class="line">    <span class="attribute">color</span>: <span class="number">#dd4b39</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
</li>
</ul>
<h3 id="6、代码修改会增添"><a href="#6、代码修改会增添" class="headerlink" title="6、代码修改会增添"></a>6、代码修改会增添</h3><ul>
<li>可以修改默认配色<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">```diff /themes/next/_config.yml</span><br><span class="line"> <span class="selector-tag">custom_file_path</span>:</span><br><span class="line">-  #style: source/_data/styles.styl</span><br><span class="line">+  style: source/_data/styles.styl</span><br><span class="line">```</span><br></pre></td></tr></table></figure>
</li>
</ul>
]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Hexo+next博客搭建记录</title>
    <url>/2020/02/02/Hexo-next%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>博客</category>
      </categories>
      <tags>
        <tag>博客</tag>
      </tags>
  </entry>
  <entry>
    <title>Gitlab使用规范</title>
    <url>/2019/12/20/Gitlab%E4%BD%BF%E7%94%A8%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h2 id="Gitlab使用规范"><a href="#Gitlab使用规范" class="headerlink" title="Gitlab使用规范"></a>Gitlab使用规范</h2><h3 id="一、Git和Github关联"><a href="#一、Git和Github关联" class="headerlink" title="一、Git和Github关联"></a>一、Git和Github关联</h3><figure class="highlight vala"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta"># ①查看本地是否有id_rsa和id_rsa.pub文件</span></span><br><span class="line"><span class="meta"># ②如果没有，运行下面命令</span></span><br><span class="line">ssh-keygen  -t rsa –C <span class="string">"邮箱"</span></span><br><span class="line"><span class="meta"># ③ 打开id_rsa.pub(公钥)，复制内容，进入github添加ssh keys,将公匙内容复制到Key中</span></span><br></pre></td></tr></table></figure>
<h3 id="二、Git使用"><a href="#二、Git使用" class="headerlink" title="二、Git使用"></a>二、Git使用</h3><h4 id="1、简单配置及命令"><a href="#1、简单配置及命令" class="headerlink" title="1、简单配置及命令"></a>1、简单配置及命令</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 配置用户名和邮箱</span></span><br><span class="line"></span><br><span class="line">git  config <span class="comment">--global  user.email lh</span></span><br><span class="line">git  config <span class="comment">--global  user.name 1956413161@qq.com</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 初始化本地仓库(当前文件夹下会产生.git文件夹为本地代码仓库)</span></span><br><span class="line"></span><br><span class="line">git init</span><br><span class="line"></span><br><span class="line"><span class="comment"># 克隆仓库</span></span><br><span class="line"></span><br><span class="line">git clone http://.....</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将文件添加到暂存区</span></span><br><span class="line"></span><br><span class="line">git add [文件名]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 将暂存区文件提交到仓库</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">commit</span> -m <span class="string">"备注信息"</span></span><br><span class="line">git <span class="keyword">commit</span> -a -m <span class="string">"备注信息"</span> <span class="comment">#将所有已跟踪文件中的执行修改或删除操作的文件都提交到本地仓库，不需要add</span></span><br><span class="line">git <span class="keyword">commit</span> <span class="comment">--amend # 将修改合并到上一次提交中，就是不增加commit记录</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 检查是否有文件未提交</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">status</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看修改未提交文件的差异</span></span><br><span class="line"></span><br><span class="line">git diff [文件名] <span class="comment">#默认是工作区与暂存区</span></span><br><span class="line">git diff </span><br><span class="line"></span><br><span class="line"><span class="comment"># 查看提交历史</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">log</span></span><br><span class="line">git <span class="keyword">log</span> <span class="comment">--pretty=oneline #显示主要内容</span></span><br></pre></td></tr></table></figure>
<h4 id="2、Git版本回退"><a href="#2、Git版本回退" class="headerlink" title="2、Git版本回退"></a>2、Git版本回退</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 获取历史版本号</span></span><br><span class="line"></span><br><span class="line">git reflog</span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退到上一版本</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard HEAD^</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 回退指定版本号</span></span><br><span class="line"></span><br><span class="line">git <span class="keyword">reset</span> <span class="comment">--hard [版本号] #版本号可以使用上面的命令查看</span></span><br></pre></td></tr></table></figure>
<h4 id="3、分支管理"><a href="#3、分支管理" class="headerlink" title="3、分支管理"></a>3、分支管理</h4><figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 创建分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git</span> <span class="string">branch [分支名]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 切换分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout [分支名]</span></span><br><span class="line"><span class="attr">git</span> <span class="string">checkout -b [分支名] #创建并切换</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 分支合并</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git</span> <span class="string">merge [分支]</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 删除分支</span></span><br><span class="line"></span><br><span class="line"><span class="attr">git</span> <span class="string">branch -d [分支名]</span></span><br></pre></td></tr></table></figure>
<h4 id="4、文件推送到Github"><a href="#4、文件推送到Github" class="headerlink" title="4、文件推送到Github"></a>4、文件推送到Github</h4><figure class="highlight crmsh"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 关联Github仓库</span></span><br><span class="line"></span><br><span class="line">git remote add origin [github仓库]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 提交到Github仓库主分支</span></span><br><span class="line"></span><br><span class="line">git push origin <span class="keyword">master</span> <span class="title"># origin</span>表示远程主机，<span class="literal">master</span>表示主分支</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>神奇操作</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式11</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F11/</url>
    <content><![CDATA[<h2 id="Python设计模式11-观察者模式-行为型"><a href="#Python设计模式11-观察者模式-行为型" class="headerlink" title="Python设计模式11(观察者模式-行为型)"></a>Python设计模式11(观察者模式-行为型)</h2><blockquote>
<p>观察者模式是一种行为型模式，在观察者模式当中，主题维护了一个依赖（观察者）列表，以便主题可以使用观察者定义的任何方法通知所有观察者它所发生的变化。</p>
<p>简单理解：观察者模式即为许多对象等待着某个主题对象的新消息，当主题对象有了新消息的时候，它就会通知所有的观察着它的对象，就像是很多的用户都订阅了一位新闻发布者，当新闻发布者发布了一个新的新闻后，他就会通知它的所有订阅者，就像是手机上一些应用的通知栏通知.</p>
</blockquote>
<h4 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h4><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 观察者</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlarmSensor</span><span class="params">(Observer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,action)</span>:</span></span><br><span class="line">        print(<span class="string">"Alarm Got: %s"</span> % action)</span><br><span class="line">        self.runAlarm()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runAlarm</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Alarm Ring..."</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterSprinker</span><span class="params">(Observer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,action)</span>:</span></span><br><span class="line">        print(<span class="string">"Sprinker Got: %s"</span> % action)</span><br><span class="line">        self.runSprinker()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runSprinker</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Spray Water..."</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmergencyDialer</span><span class="params">(Observer)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">update</span><span class="params">(self,action)</span>:</span></span><br><span class="line">        print(<span class="string">"Dialer Got: %s"</span>%action)</span><br><span class="line">        self.runDialer()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runDialer</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Dial 119..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 被观察者</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Observed</span>:</span></span><br><span class="line">    observers=[]</span><br><span class="line">    action=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">addObserver</span><span class="params">(self,observer)</span>:</span></span><br><span class="line">        self.observers.append(observer)</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">notifyAll</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">for</span> obs <span class="keyword">in</span> self.observers:</span><br><span class="line">            obs.update(self.action)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">smokeSensor</span><span class="params">(Observed)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setAction</span><span class="params">(self,action)</span>:</span></span><br><span class="line">        self.action=action</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">isFire</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 业务代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    alarm=AlarmSensor()</span><br><span class="line">    sprinker=WaterSprinker()</span><br><span class="line">    dialer=EmergencyDialer()</span><br><span class="line"></span><br><span class="line">    smoke_sensor=smokeSensor()</span><br><span class="line">    smoke_sensor.addObserver(alarm)</span><br><span class="line">    smoke_sensor.addObserver(sprinker)</span><br><span class="line">    smoke_sensor.addObserver(dialer)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> smoke_sensor.isFire():</span><br><span class="line">        smoke_sensor.setAction(<span class="string">"On Fire!"</span>)</span><br><span class="line">        smoke_sensor.notifyAll()</span><br></pre></td></tr></table></figure>
<h4 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h4><ul>
<li>消息监听更新</li>
<li>多级触发的场景</li>
</ul>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式12</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F12/</url>
    <content><![CDATA[<h2 id="Python设计模式12-策略模式-行为型"><a href="#Python设计模式12-策略模式-行为型" class="headerlink" title="Python设计模式12(策略模式-行为型)"></a>Python设计模式12(策略模式-行为型)</h2><blockquote>
<p>策略指的就是为了达到某一目的而采取的手段或者方法。为了实现软件设计，对象可能会用到多种多样的算法。这些算法甚至会经常改变。如果将这些算法都硬编码到对象中，将会使得对象本身变得臃肿不堪，而且有时候支持不同的算法也是一个性能负担。策略模式很好的实现了在运行时根据需要透明的更改对象的算法和将算法与本身对象解耦，从而避免出现上述两个问题.</p>
<p>因此策略模式可以定义为：　定义一系列算法，将每一个算法封装起来，并让它们可以相互替换。策略模式让算法可以独立于使用它的客户变化。每一个封装算法的类称之为策略(Strategy)类，策略模式提供了一种可插入式(Pluggable)算法的实现方案</p>
</blockquote>
<h4 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h4><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">customer</span>:</span></span><br><span class="line">    customer_name=<span class="string">""</span></span><br><span class="line">    snd_way=<span class="string">""</span></span><br><span class="line">    info=<span class="string">""</span></span><br><span class="line">    phone=<span class="string">""</span></span><br><span class="line">    email=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setPhone</span><span class="params">(self,phone)</span>:</span></span><br><span class="line">        self.phone=phone</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setEmail</span><span class="params">(self,mail)</span>:</span></span><br><span class="line">        self.email=mail</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getPhone</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.phone</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">getEmail</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.email</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setInfo</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        self.info=info</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setName</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        self.customer_name=name</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setBrdWay</span><span class="params">(self,snd_way)</span>:</span></span><br><span class="line">        self.snd_way=snd_way</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sndMsg</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.snd_way.send(self.info)</span><br><span class="line"></span><br><span class="line"><span class="comment">#snd_way向客户发送信息的方式，该方式置为可设，即可根据业务来进行策略的选择。</span></span><br><span class="line"><span class="comment">#发送方式构建如下：</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">msgSender</span>:</span></span><br><span class="line">    dst_code=<span class="string">""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">setCode</span><span class="params">(self,code)</span>:</span></span><br><span class="line">        self.dst_code=code</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">emailSender</span><span class="params">(msgSender)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        print(<span class="string">"EMAIL_ADDRESS:%s EMAIL:%s"</span>%(self.dst_code,info))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">textSender</span><span class="params">(msgSender)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">send</span><span class="params">(self,info)</span>:</span></span><br><span class="line">        print(<span class="string">"TEXT_CODE:%s EMAIL:%s"</span>%(self.dst_code,info))</span><br><span class="line"></span><br><span class="line"><span class="comment">#业务场景中将发送方式作为策略</span></span><br><span class="line"><span class="keyword">if</span>  __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    customer_x=customer()</span><br><span class="line">    customer_x.setName(<span class="string">"CUSTOMER_X"</span>)</span><br><span class="line">    customer_x.setPhone(<span class="string">"10023456789"</span>)</span><br><span class="line">    customer_x.setEmail(<span class="string">"customer_x@xmail.com"</span>)</span><br><span class="line">    customer_x.setInfo(<span class="string">"Welcome to our new party!"</span>)</span><br><span class="line">    text_sender=textSender()</span><br><span class="line">    text_sender.setCode(customer_x.getPhone())</span><br><span class="line">    customer_x.setBrdWay(text_sender)</span><br><span class="line">    customer_x.sndMsg()</span><br><span class="line">    mail_sender=emailSender()</span><br><span class="line">    mail_sender.setCode(customer_x.getEmail())</span><br><span class="line">    customer_x.setBrdWay(mail_sender)</span><br><span class="line">    customer_x.sndMsg()</span><br></pre></td></tr></table></figure>
<h4 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h4>]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式10</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F10/</url>
    <content><![CDATA[<h2 id="Python设计模式10-代理模式-结构型"><a href="#Python设计模式10-代理模式-结构型" class="headerlink" title="Python设计模式10(代理模式-结构型)"></a>Python设计模式10(代理模式-结构型)</h2><blockquote>
<p>在某些应用中，我们想要在访问某个对象之前执行一个或者多个重要的操作，例如，访问敏感信息 — 在允许用户访问敏感信息之前，我们希望确保用户具备足够的去权限。同时在网络访问时，限制某些网络的访问等操作。</p>
</blockquote>
<ul>
<li><p>真实的对象（执行业务逻辑，被代理的对象）</p>
</li>
<li><p>代理类（用户请求的一个接口，对真实目标的保护）</p>
</li>
<li><p>用户（获取任务的用户请求）</p>
</li>
</ul>
<h4 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h4><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">## 以下是来自于github的代码：</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">SalesManager</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Sales Manager ready to talk"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Proxy</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.busy = <span class="string">'No'</span></span><br><span class="line">        self.sales = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Proxy checking for Sales Manager availability"</span>)</span><br><span class="line">        <span class="keyword">if</span> self.busy == <span class="string">'No'</span>:</span><br><span class="line">            self.sales = SalesManager()</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            self.sales.talk()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            time.sleep(<span class="number">0.1</span>)</span><br><span class="line">            print(<span class="string">"Sales Manager is busy"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NoTalkProxy</span><span class="params">(Proxy)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">talk</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Proxy checking for Sales Manager availability"</span>)</span><br><span class="line">        time.sleep(<span class="number">0.1</span>)</span><br><span class="line">        print(<span class="string">"This Sales Manager will not talk to you whether he/she is busy or not"</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    p = Proxy()</span><br><span class="line">    p.talk()</span><br><span class="line">    p.busy = <span class="string">'Yes'</span></span><br><span class="line">    p.talk()</span><br><span class="line">    p = NoTalkProxy()</span><br><span class="line">    p.talk()</span><br><span class="line">    p.busy = <span class="string">'Yes'</span></span><br><span class="line">    p.talk()</span><br><span class="line"></span><br><span class="line"><span class="comment">### OUTPUT ###</span></span><br><span class="line"><span class="comment"># Proxy checking for Sales Manager availability</span></span><br><span class="line"><span class="comment"># Sales Manager ready to talk</span></span><br><span class="line"><span class="comment"># Proxy checking for Sales Manager availability</span></span><br><span class="line"><span class="comment"># Sales Manager is busy</span></span><br><span class="line"><span class="comment"># Proxy checking for Sales Manager availability</span></span><br><span class="line"><span class="comment"># This Sales Manager will not talk to you whether he/she is busy or not</span></span><br><span class="line"><span class="comment"># Proxy checking for Sales Manager availability</span></span><br><span class="line"><span class="comment"># This Sales Manager will not talk to you whether he/she is busy or not</span></span><br></pre></td></tr></table></figure>
<h4 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h4><ul>
<li><p>远程代理，也就是为一个对象在不同的地址空间提供局部代表。这样可以隐藏一个对象存在于不同地址空间的事实。</p>
</li>
<li><p>虚拟代理，是根据需要创建开销大的对象。通过它来存放实例化需要很长时间的真是对象。用于惰性求值，将一个大计算量对象的创建延迟到真正需要的时候进行。例如html中，图片需要load很久，所以通过虚拟代理来代替真实的图片</p>
</li>
<li><p>安全代理，或叫保护/防护代理：控制对敏感对象的访问。用来控制真实对象访问时的权限</p>
</li>
<li><p>智能（引用）代理：在对象被访问时执行额外的动作。此类代理的例子包括引用计数和线程安全检查。是指当调用真实的对象时，代理处理另外一些事</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式13</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F13/</url>
    <content><![CDATA[<h2 id="Python设计模式13-中介者模式-行为型"><a href="#Python设计模式13-中介者模式-行为型" class="headerlink" title="Python设计模式13(中介者模式-行为型)"></a>Python设计模式13(中介者模式-行为型)</h2><blockquote>
<p>将其他对象之间的交互装在中介者对象中，达到松耦合、隐式引用、独立变化，与代理模式有相似之感，但是代理模式是结构性模式，侧重于对对象调用的接口控制，而中介者模式是行为性模式，解决对象与对象之间相互调用的行为问题.</p>
</blockquote>
<h4 id="1、例子"><a href="#1、例子" class="headerlink" title="1、例子"></a>1、例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Consumer</span>:</span></span><br><span class="line">    <span class="string">"""消费者类"""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, price)</span>:</span></span><br><span class="line">        self.name = <span class="string">"消费者"</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.price = price</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""买东西"""</span></span><br><span class="line">        print(<span class="string">"向&#123;&#125; 购买 &#123;&#125;价格内的 &#123;&#125;产品"</span>.format(name, self.price, self.product))</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Producer</span>:</span></span><br><span class="line">    <span class="string">"""生产者类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, product, price)</span>:</span></span><br><span class="line">        self.name = <span class="string">"生产者"</span></span><br><span class="line">        self.product = product</span><br><span class="line">        self.price = price</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sale</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""卖东西"""</span></span><br><span class="line">        print(<span class="string">"向&#123;&#125; 销售 &#123;&#125;价格的 &#123;&#125;产品"</span>.format(name, self.price, self.product))</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Mediator</span>:</span></span><br><span class="line">    <span class="string">"""中介者类"""</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.name = <span class="string">"中介者"</span></span><br><span class="line">        self.consumer = <span class="literal">None</span></span><br><span class="line">        self.producer = <span class="literal">None</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">sale</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""进货"""</span></span><br><span class="line">        self.consumer.shopping(self.producer.name)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">shopping</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""出货"""</span></span><br><span class="line">        self.producer.sale(self.consumer.name)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">profit</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""利润"""</span></span><br><span class="line">        print(<span class="string">'中介净赚：&#123;&#125;'</span>.format((self.consumer.price - self.producer.price )))</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">complete</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.sale()</span><br><span class="line">        self.shopping()</span><br><span class="line">        self.profit()</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    consumer = Consumer(<span class="string">'手机'</span>, <span class="number">3000</span>)</span><br><span class="line">    producer = Producer(<span class="string">"手机"</span>, <span class="number">2500</span>)</span><br><span class="line">    mediator = Mediator()</span><br><span class="line">    mediator.consumer = consumer</span><br><span class="line">    mediator.producer = producer</span><br><span class="line">    mediator.complete()</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 向生产者 购买 3000价格内的 手机产品</span></span><br><span class="line"><span class="comment"># 向消费者 销售 2500价格的 手机产品</span></span><br><span class="line"><span class="comment"># 中介净赚：500</span></span><br></pre></td></tr></table></figure>
<h4 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h4><ul>
<li><p>系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象</p>
</li>
<li><p>想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>行为型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式7</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F7/</url>
    <content><![CDATA[<h2 id="Python设计模式7-桥接模式-结构型"><a href="#Python设计模式7-桥接模式-结构型" class="headerlink" title="Python设计模式7(桥接模式-结构型)"></a>Python设计模式7(桥接模式-结构型)</h2><blockquote>
<p>桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于结构型模式，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦.</p>
<p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响.</p>
</blockquote>
<h4 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h4><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"my name is :&#123;&#125;"</span>.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"我的名字是：&#123;&#125;"</span>.format(name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bridge</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, ager, classname)</span>:</span></span><br><span class="line">        self.ager = ager</span><br><span class="line">        self.classname = classname</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">bridge_run</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.classname.run(self.ager)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    test = Bridge(<span class="string">'李华'</span>, A())</span><br><span class="line">    test.bridge_run()</span><br><span class="line">    test.ager = <span class="string">'Tome'</span></span><br><span class="line">    test.bridge_run()</span><br><span class="line">    test.classname = B()</span><br><span class="line">    test.bridge_run()</span><br><span class="line">    test.ager = <span class="string">'李华'</span></span><br><span class="line">    test.bridge_run()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面代码可以看出来抽象的两个A、B类和实例类在桥接后可以实现独立的控制变化，这样实现了代码的脱耦。</p>
</blockquote>
<h4 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h4><p>待补充</p>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式8</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F8/</url>
    <content><![CDATA[<h2 id="Python设计模8-外观模式-结构型"><a href="#Python设计模8-外观模式-结构型" class="headerlink" title="Python设计模8(外观模式-结构型)"></a>Python设计模8(外观模式-结构型)</h2><blockquote>
<p>外部与一个子系统的通信必须通过一个统一的外观对象进行，为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式又称为门面模式，它是一种对象结构型模式.</p>
<p>比如你回家呼唤小爱同学。窗帘、灯、空气净化器就都开了，这就是一种外观模式应用</p>
</blockquote>
<h4 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h4><p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AlarmSensor</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Alarm Ring..."</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WaterSprinker</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Spray Water..."</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmergencyDialer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"Dial 119..."</span>)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">EmergencyFacade</span>:</span></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">    外观类中封装了对子系统的操作</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alarm_sensor=AlarmSensor()</span><br><span class="line">        self.water_sprinker=WaterSprinker()</span><br><span class="line">        self.emergency_dialer=EmergencyDialer()</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">runAll</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.alarm_sensor.run()</span><br><span class="line">        self.water_sprinker.run()</span><br><span class="line">        self.emergency_dialer.run()</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">"__main__"</span>:</span><br><span class="line">    emergency_facade=EmergencyFacade()</span><br><span class="line">    emergency_facade.runAll()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样封装通过客户端直接操作对象，可以与复杂的子系统隔离开</p>
</blockquote>
<h4 id="2、应用场景"><a href="#2、应用场景" class="headerlink" title="2、应用场景"></a>2、应用场景</h4><p>待补充</p>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式9</title>
    <url>/2019/12/13/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F9/</url>
    <content><![CDATA[<h2 id="Python设计模式9-组合模式-结构型"><a href="#Python设计模式9-组合模式-结构型" class="headerlink" title="Python设计模式9(组合模式-结构型)"></a>Python设计模式9(组合模式-结构型)</h2><blockquote>
<p>将对象组合成树状结构，来表示业务逻辑上的[部分-整体]层次，这种组合使单个对象和组合对象的使用方法一样</p>
</blockquote>
<h4 id="1、实例"><a href="#1、实例" class="headerlink" title="1、实例"></a>1、实例</h4><p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComponentBases</span>:</span></span><br><span class="line">    <span class="string">"""部门抽象出来的基类"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        slef.name = name</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self, number)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Node</span><span class="params">(ComponentBases)</span>:</span></span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, duty)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.duty = duty</span><br><span class="line">        self.children = []</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self.children.append(obj)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">remove</span><span class="params">(self, obj)</span>:</span></span><br><span class="line">        self.children.remove(obj)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">display</span><span class="params">(self, number=<span class="number">1</span>)</span>:</span></span><br><span class="line">        print(<span class="string">"部门：&#123;&#125; 级别：&#123;&#125; 职责：&#123;&#125;"</span>.format(self.name, number, self.duty))</span><br><span class="line">        n = number+<span class="number">1</span></span><br><span class="line">        <span class="keyword">for</span> obj <span class="keyword">in</span> self.children:</span><br><span class="line">            obj.display(n)</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    root = Node(<span class="string">"总经理办公室"</span>, <span class="string">"总负责人"</span>)</span><br><span class="line">    node1 = Node(<span class="string">"财务部门"</span>, <span class="string">"公司财务管理"</span>)</span><br><span class="line">    root.add(node1)</span><br><span class="line">    node2 = Node(<span class="string">"业务部门"</span>, <span class="string">"销售产品"</span>)</span><br><span class="line">    root.add(node2)</span><br><span class="line">    node3 = Node(<span class="string">"生产部门"</span>, <span class="string">"生产产品"</span>)</span><br><span class="line">    root.add(node3)</span><br><span class="line">    node4 = Node(<span class="string">"销售事业一部门"</span>, <span class="string">"A产品销售"</span>)</span><br><span class="line">    node2.add(node4)</span><br><span class="line">    node5 = Node(<span class="string">"销售事业二部门"</span>, <span class="string">"B产品销售"</span>)</span><br><span class="line">    node2.add(node5)</span><br><span class="line">    root.display()</span><br><span class="line"> </span><br><span class="line">----------输出-----------</span><br><span class="line">部门：总经理办公室 级别：<span class="number">1</span> 职责：总负责人</span><br><span class="line">部门：财务部门 级别：<span class="number">2</span> 职责：公司财务管理</span><br><span class="line">部门：业务部门 级别：<span class="number">2</span> 职责：销售产品</span><br><span class="line">部门：销售事业一部门 级别：<span class="number">3</span> 职责：A产品销售</span><br><span class="line">部门：销售事业二部门 级别：<span class="number">3</span> 职责：B产品销售</span><br><span class="line">部门：生产部门 级别：<span class="number">2</span> 职责：生产产品</span><br></pre></td></tr></table></figure>
<blockquote>
<p>就是建立节点的方法，用于树状分支</p>
</blockquote>
<h4 id="2、应用实例"><a href="#2、应用实例" class="headerlink" title="2、应用实例"></a>2、应用实例</h4><p>待补充</p>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Cookie爬取Ajax数据</title>
    <url>/2019/11/27/Cookie%E7%88%AC%E5%8F%96Ajax%E6%95%B0%E6%8D%AE/</url>
    <content><![CDATA[<h2 id="纪念一次心血来潮的爬虫测试"><a href="#纪念一次心血来潮的爬虫测试" class="headerlink" title="纪念一次心血来潮的爬虫测试"></a>纪念一次心血来潮的爬虫测试</h2><blockquote>
<p>上次做完行政，心里真的是很不爽，一方面学校网站不给力，一方面那个题也是很难受的，虽然后来发现了懵搜小助手，但还是效率很慢，想着自己可以不可以搞得快一点，当时第一想法就是把题爬出来，然后发给萌搜小助手，到时候自己对着消息写答案不是美滋滋，哈哈哈，下面记录一下自己的这次心血来潮。</p>
</blockquote>
<h4 id="1、网站分析"><a href="#1、网站分析" class="headerlink" title="1、网站分析"></a>1、网站分析</h4><blockquote>
<p>之前爬过学校的图书馆，因为为了实现自动化所以用的selenium(一个webdriver测试工具)，也是为了用来解决验证码问题和js渲染，这里分析了一下两个网站登录的区别，发现学堂云的网站基本上所有数据都是基于js渲染的。这样的话想要直接获取数据是比较困难的</p>
</blockquote>
<p>网站截图(已经进入课程):<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_17-50-32.jpg" alt="学堂云"></p>
<p>这是我直接get网站的结果:</p>
<p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_17-41-30.jpg" alt="get结果"></p>
<blockquote>
<p>所以接下来的问题就在于如何获取js渲染的数据呢，我们知道很多时候为了实现数据的及时刷新，都会使用Ajax，那我们展示的数据就会存放在ajax的数据中，所以接下来我们的目标就是找到带题目数据的ajax数据</p>
</blockquote>
<a id="more"></a>
<h4 id="2、ajax数据定位"><a href="#2、ajax数据定位" class="headerlink" title="2、ajax数据定位"></a>2、ajax数据定位</h4><ul>
<li><p><strong>查找ajax数据</strong><br>我们可以在谷歌浏览器的开发工具中找到network中xhr数据<br>如下图：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_17-52-47.jpg" alt=""></p>
</li>
<li><p><strong>查看所有数据中，是否有包含题目信息的ajax</strong><br>下图是ajax数据表：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_17-54-50.jpg" alt=""><br>这里有两个技巧，一个是直接看大小，因为这里题目比较多，所以储存的data一定很大，就直接可以定位了，还有一个方法是对于动态刷新的就直接下拉，看哪个数据变化，经验啊哈哈哈哈</p>
</li>
</ul>
<h4 id="3、ajax数据获取"><a href="#3、ajax数据获取" class="headerlink" title="3、ajax数据获取"></a>3、ajax数据获取</h4><ul>
<li><p><strong>cookie获取</strong><br>因为是要登录才能查看，所以先构造header，加入cookie<br>这是cookie位置：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_18-05-58.jpg" alt=""></p>
</li>
<li><p><strong>payload数据添加</strong><br>这里通过cookie访问网页，发现查不到网页，会等到error页面，然后思考，正常的ajax会加入页面信息，这里没有，所以发送post请求时，还需要其他参数来控制subject信息，查看header发现提交需要额外的json数据。<br>如下图：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_18-06-17.jpg" alt=""><br>因为json要指示格式，所以需要在header中加入<strong>content-type: ‘application/json’</strong></p>
</li>
</ul>
<h4 id="4、批量爬取思考"><a href="#4、批量爬取思考" class="headerlink" title="4、批量爬取思考"></a>4、批量爬取思考</h4><blockquote>
<p>这里要回想一下爬取ajax用到的payload，分析发现class_id指示课程，homework_id就是产品id加上题的id，在这个基础上通过修改homework_id就可以爬取其它测试的题目了</p>
</blockquote>
<h4 id="5、fildder使用技巧"><a href="#5、fildder使用技巧" class="headerlink" title="5、fildder使用技巧"></a>5、fildder使用技巧</h4><ul>
<li><strong>url过滤</strong><br>如下设置:<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_22-43-41.jpg" alt=""></li>
<li><strong>命令</strong><br>如下图：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-27_22-46-29.jpg" alt=""></li>
</ul>
<h4 id="6、源码"><a href="#6、源码" class="headerlink" title="6、源码"></a>6、源码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> json</span><br><span class="line"></span><br><span class="line">url = <span class="string">'https://hfut.xuetangx.com/inner_api/homework/paper/subject/'</span></span><br><span class="line"></span><br><span class="line">js = &#123;</span><br><span class="line">    <span class="string">'product_id'</span>: <span class="string">'20760'</span>, </span><br><span class="line">    <span class="string">'homework_id'</span>: <span class="string">'H+20760+002'</span>, </span><br><span class="line">    <span class="string">'class_id'</span>: <span class="string">'37429'</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = json.dumps(js)</span><br><span class="line"></span><br><span class="line">headers = &#123;</span><br><span class="line">    <span class="string">'User-Agent'</span>: <span class="string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.75 Safari/537.36'</span>,</span><br><span class="line">    <span class="string">'content-type'</span>: <span class="string">'application/json'</span>,</span><br><span class="line">    <span class="string">'Cookie'</span>: <span class="string">'UM_distinctid=16e7d6678b1646-00a194cda2b2cd-67e153a-1fa400-16e7d6678b2647; _log_user_id=2734764cb98e751f2fe903147269e33b; sharesessionid=b866b1c1a9dfefbf725810f324321dfe; frontendUserReferrer=http://www.xuetangx.com/cloud; frontendUserTrack=12298; frontendUserTrackPrev=12298; plat_id=369; org_id=503; mode=1; xt=gAAAAABd3fHjlrtKBB0j0ErFWIcCenWz7RgdyMeF1B1DRIk_z8DNkmhOVqHC8SxVw7JtnGMdkw4QHUP645TKkWJq-yYEJxzKuUGZYrWieH1Z25jvN-fozTU; xt_expires_in=604800; identity=1; CNZZDATA1273255756=947970158-1574057096-%7C1574845704; access_token=gAAAAABd3kdpfWD8-X_bmzP-Uvgde_xTX4tOyXLNzks4SmSyb0a_T5M30bFKGhs_cr0EPf0VuN7PCk6Lnl6k4nc-TyJG0ekvWnbWALxqLUsJcQnTgtaMT0g'</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_json</span><span class="params">(data,index)</span>:</span></span><br><span class="line">    res = requests.post(url,data = data,headers = headers).json()</span><br><span class="line">    path = str(index+<span class="number">1</span>)+<span class="string">".json"</span></span><br><span class="line">    <span class="keyword">with</span> open(path,<span class="string">'w'</span>,encoding = <span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            json.dump(res,f,indent = <span class="number">2</span>,ensure_ascii=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:   </span><br><span class="line">     <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">13</span>):</span><br><span class="line">        id = js[<span class="string">"homework_id"</span>]</span><br><span class="line">        id = id.split(<span class="string">"+"</span>)</span><br><span class="line">        <span class="keyword">if</span> i&lt;=<span class="number">7</span>:</span><br><span class="line">            id[<span class="number">-1</span>] = str(<span class="number">0</span>)+str(<span class="number">0</span>)+str(i+<span class="number">2</span>)</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            id[<span class="number">-1</span>] = str(<span class="number">0</span>)+str(i+<span class="number">2</span>)</span><br><span class="line">        id = <span class="string">"+"</span>.join(id)</span><br><span class="line">        js[<span class="string">"homework_id"</span>] = id</span><br><span class="line">        data = json.dumps(js)</span><br><span class="line">        get_json(data,i)</span><br></pre></td></tr></table></figure>
<h4 id="7、小计"><a href="#7、小计" class="headerlink" title="7、小计"></a>7、小计</h4><blockquote>
<p>本来想利用itchat实现答案获取，但是网页版被封了就暂时到这了，欢迎大家留言讨论</p>
</blockquote>
]]></content>
      <categories>
        <category>爬虫</category>
      </categories>
      <tags>
        <tag>爬虫</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式6</title>
    <url>/2019/11/19/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F6/</url>
    <content><![CDATA[<h2 id="Python设计模式6-装饰器模式"><a href="#Python设计模式6-装饰器模式" class="headerlink" title="Python设计模式6(装饰器模式)"></a>Python设计模式6(装饰器模式)</h2><h3 id="一、python闭包"><a href="#一、python闭包" class="headerlink" title="一、python闭包"></a>一、python闭包</h3><blockquote>
<p>在一个外函数中定义了一个内函数，内函数里运用了外函数的临时变量，并且外函数的返回值是内函数的引用。这样就构成了一个闭包</p>
</blockquote>
<p>举例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># print_msg是外围函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">print_msg</span><span class="params">()</span>:</span></span><br><span class="line">    msg = <span class="string">"I'm closure"</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># printer是嵌套函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">printer</span><span class="params">()</span>:</span></span><br><span class="line">        print(msg)</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> printer</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 这里获得的就是一个闭包</span></span><br><span class="line">closure = print_msg()</span><br><span class="line"><span class="comment">#外函数结束的时候发现内部函数将会用到自己的临时变量，这两个临时变量就不会释放，会绑定给这个内部函数</span></span><br><span class="line">print(<span class="number">123</span>)</span><br><span class="line"><span class="comment">#先输出123</span></span><br><span class="line"><span class="comment"># 输出 I'm closure</span></span><br><span class="line">closure()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>闭包的作用就是保存上下文内容，脱离了原本的作用域，可以用于装饰器的构建</p>
</blockquote>
<h3 id="二、python装饰器"><a href="#二、python装饰器" class="headerlink" title="二、python装饰器"></a>二、python装饰器</h3><h4 id="1、引入"><a href="#1、引入" class="headerlink" title="1、引入"></a>1、引入</h4><blockquote>
<p>当我们想统计一段代码的运行时间时，很多时候我们需要侵入到代码内部去修改，，就像下面一样</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"world"</span>)</span><br><span class="line">    end_time = time.time()</span><br><span class="line"></span><br><span class="line">    execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">    print(<span class="string">"time is %d ms"</span> %execution_time)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样往往会很不规范，python可以实现函数的传参，所以我们可以再定义一个函数去调用，如下</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(func)</span>:</span></span><br><span class="line">    start_time = time.time()</span><br><span class="line">    f()</span><br><span class="line">    end_time = time.time()</span><br><span class="line">    execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">    print(<span class="string">"time is %d ms"</span> %execution_time)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">    deco(f)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这样每次都要调用deco(),如果使用过多会很麻烦。这样装饰器就出现了</p>
</blockquote>
<h4 id="2、简单装饰器"><a href="#2、简单装饰器" class="headerlink" title="2、简单装饰器"></a>2、简单装饰器</h4><p>例子:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">()</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f()</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        print(<span class="string">"time is %d ms"</span> %execution_time )</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">"hello"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"world"</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里面使用了闭包的方法，外部函数传入要装饰函数名，内部函数返回装饰函数的名字，这里没有对被装饰的函数进行任何修改，其实加入@desc很像java中的注解方法，这里相当于不用再调用deco(f())了，可以直接调用要被装饰的函数</p>
</blockquote>
<h4 id="3、带固定参装饰器"><a href="#3、带固定参装饰器" class="headerlink" title="3、带固定参装饰器"></a>3、带固定参装饰器</h4><p>例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(a,b)</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f(a,b)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        print(<span class="string">"time is %d ms"</span> % execution_time)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(<span class="string">"be on"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"result is %d"</span> %(a+b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="4、无固定参数传递"><a href="#4、无固定参数传递" class="headerlink" title="4、无固定参数传递"></a>4、无固定参数传递</h4><p>例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time_ = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        print(<span class="string">"time is %d ms"</span> %execution_time)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(<span class="string">"be on"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"result is %d"</span> %(a+b))</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f2</span><span class="params">(a,b,c)</span>:</span></span><br><span class="line">    print(<span class="string">"be on"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"result is %d"</span> %(a+b+c))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f2(<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>)</span><br><span class="line">    f(<span class="number">3</span>,<span class="number">4</span>)</span><br></pre></td></tr></table></figure></p>
<h4 id="5、多个装饰器装饰一个函数"><a href="#5、多个装饰器装饰一个函数" class="headerlink" title="5、多个装饰器装饰一个函数"></a>5、多个装饰器装饰一个函数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco01</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"this is deco01"</span>)</span><br><span class="line">        start_time = time.time()</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line">        end_time = time.time()</span><br><span class="line">        execution_time = (end_time - start_time)*<span class="number">1000</span></span><br><span class="line">        print(<span class="string">"time is %d ms"</span> % execution_time)</span><br><span class="line">        print(<span class="string">"deco01 end here"</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">deco02</span><span class="params">(f)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">wrapper</span><span class="params">(*args, **kwargs)</span>:</span></span><br><span class="line">        print(<span class="string">"this is deco02"</span>)</span><br><span class="line">        f(*args, **kwargs)</span><br><span class="line"></span><br><span class="line">        print(<span class="string">"deco02 end here"</span>)</span><br><span class="line">    <span class="keyword">return</span> wrapper</span><br><span class="line"></span><br><span class="line"><span class="meta">@deco01</span></span><br><span class="line"><span class="meta">@deco02</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">f</span><span class="params">(a,b)</span>:</span></span><br><span class="line">    print(<span class="string">"be on"</span>)</span><br><span class="line">    time.sleep(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"result is %d"</span> %(a+b))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    f(<span class="number">3</span>,<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># result:</span></span><br><span class="line">this <span class="keyword">is</span> deco01</span><br><span class="line">this <span class="keyword">is</span> deco02</span><br><span class="line">be on</span><br><span class="line">result <span class="keyword">is</span> <span class="number">7</span></span><br><span class="line">deco02 end here</span><br><span class="line">time <span class="keyword">is</span> <span class="number">1001</span> ms</span><br><span class="line">deco01 end here</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面结果可以看出来多个装饰器的执行是有顺序的，相当于执行deco01(deco02(f(3,4)))</p>
</blockquote>
<h4 id="6、类装饰器"><a href="#6、类装饰器" class="headerlink" title="6、类装饰器"></a>6、类装饰器</h4><blockquote>
<p>装饰器不仅可以是函数，还可以是类，相比函数装饰器，类装饰器具有灵活度大、高内聚、封装性等优点。使用类装饰器主要依靠类的<strong>call</strong>方法</p>
</blockquote>
<p>例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, func)</span>:</span></span><br><span class="line">        self._func = func</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">'class decorator runing'</span>)</span><br><span class="line">        self._func()</span><br><span class="line">        print(<span class="string">'class decorator ending'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Foo　　# bar = Foo(bar)</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">bar</span><span class="params">()</span>:</span></span><br><span class="line">    print(<span class="string">'bar'</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">bar()　　<span class="comment"># Foo(bar)()</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 结果</span></span><br><span class="line"><span class="comment"># class decorator runing</span></span><br><span class="line"><span class="comment"># bar</span></span><br><span class="line"><span class="comment"># class decorator ending</span></span><br></pre></td></tr></table></figure></p>
<blockquote>
<p>这里的<strong>call</strong>魔术方法，相当于实现闭包功能，可以参照之前魔术方法那一篇文章</p>
</blockquote>
<h3 id="三、python内置装饰器"><a href="#三、python内置装饰器" class="headerlink" title="三、python内置装饰器"></a>三、python内置装饰器</h3><h4 id="1、property"><a href="#1、property" class="headerlink" title="1、property"></a>1、property</h4><blockquote>
<p>property可以将python定义的函数当做属性访问，从而提供更加友好访问方式，但是有时候setter/deleter也是需要的<br>只有@property表示只读。<br>同时有@property和@x.setter表示可读可写。<br>同时有@property和@x.setter和@x.deleter表示可读可写可删除。</p>
</blockquote>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Foo</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.__name = name</span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.__name</span><br><span class="line"><span class="meta">    @name.setter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self, value)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> isinstance(value, str):</span><br><span class="line">            <span class="keyword">raise</span> TypeError(<span class="string">'name must be str'</span>)</span><br><span class="line">        self.__name = value</span><br><span class="line"><span class="meta">    @name.deleter</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">name</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">raise</span> TypeError(<span class="string">'can not delete'</span>)</span><br><span class="line">f = Foo(<span class="string">'jack'</span>)</span><br><span class="line">print(f.name)  <span class="comment"># jack</span></span><br><span class="line">f.name = <span class="string">'hanmeimei'</span></span><br><span class="line">print(f.name)  <span class="comment"># hanmeimei</span></span><br><span class="line"><span class="comment"># del f.name  # TypeError: can not delete</span></span><br></pre></td></tr></table></figure>
<h4 id="2、类方法"><a href="#2、类方法" class="headerlink" title="2、类方法"></a>2、类方法</h4><blockquote>
<p>仅仅与类交互而不和实例交互，类在使用时会将类本身当做参数传给类方法的第一个参数</p>
</blockquote>
<p>例子：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Car</span>:</span></span><br><span class="line">    car = <span class="string">'audi'</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">value</span><span class="params">(cls, category)</span>:</span></span><br><span class="line">        print(<span class="string">'%s is the %s'</span> % (category, cls.car))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Bmw</span><span class="params">(Car)</span>:</span></span><br><span class="line">    car = <span class="string">'Bmw'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Benz</span><span class="params">(Car)</span>:</span></span><br><span class="line">    car = <span class="string">'Benz'</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">print(<span class="string">'通过实例进行调用'</span>)</span><br><span class="line">b = Bmw()</span><br><span class="line">b.value(<span class="string">'normal'</span>)</span><br><span class="line">print(<span class="string">'直接用类名进行调用'</span>)</span><br><span class="line">Benz.value(<span class="string">'NOnormal'</span>)</span><br></pre></td></tr></table></figure>
<h4 id="3、静态方法"><a href="#3、静态方法" class="headerlink" title="3、静态方法"></a>3、静态方法</h4><blockquote>
<p>将类中的方法设置为静态方法，就是在不需要创建实例对象的情况下，可以通过类名来进行直接引用，来达到将函数功能与实例解绑的效果</p>
</blockquote>
<p>例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span>:</span></span><br><span class="line"></span><br><span class="line"><span class="meta">    @staticmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">index</span><span class="params">(x, y)</span>:</span></span><br><span class="line">        print(<span class="string">'x + y = %s'</span> % (x+y))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">cls = Test()</span><br><span class="line">print(<span class="string">'可以通过实例对象来引用'</span>)</span><br><span class="line">cls.index(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line">print(<span class="string">'通过类名直接引用静态方法'</span>)</span><br><span class="line">Test.index(<span class="number">1</span>, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="string">'''</span></span><br><span class="line"><span class="string">可以通过实例对象来引用</span></span><br><span class="line"><span class="string">x + y = 3</span></span><br><span class="line"><span class="string">通过类名直接引用静态方法</span></span><br><span class="line"><span class="string">x + y = 3</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure></p>
<h4 id="4、实例方法、类方法、和静态方法区别"><a href="#4、实例方法、类方法、和静态方法区别" class="headerlink" title="4、实例方法、类方法、和静态方法区别"></a>4、实例方法、类方法、和静态方法区别</h4><blockquote>
<p>实例方法调用时有一个隐含参数self，实例调用时可以不传self，self是实例本身<br>类方法调用时有一个隐含参数cls，类调用时可以不传cls，cls是实例本身<br>静态方法没有隐含参数<br>类方法和静态方法可以通过函数名直接调用方法，实例方法必须通过实例</p>
</blockquote>
<h3 id="四、装饰器模式"><a href="#四、装饰器模式" class="headerlink" title="四、装饰器模式"></a>四、装饰器模式</h3><blockquote>
<p>在面向对象中，装饰模式指：动态地给一个对象添加一些额外的职责。就增加一些功能来说，装饰模式比生成子类更为灵活。<br>装饰器模式就是利用装饰器实现对一些对象功能扩展，例如在django项目登录模块中对一些需要登录功能的限制就使用到了这个模式，通过添加装饰器对功能限制，这样一方面实现了功能扩展，也让代码更加规范易懂</p>
</blockquote>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享2</title>
    <url>/2019/11/18/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB2/</url>
    <content><![CDATA[<h2 id="忍耐与喜乐"><a href="#忍耐与喜乐" class="headerlink" title="忍耐与喜乐"></a>忍耐与喜乐</h2><blockquote>
<p>在指望中要喜乐；在患难中要忍耐；祷告要恒切。<br>(罗马书 12:12 和合本)</p>
</blockquote>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">一直认为一个基督徒活出的生命应该是满有喜乐的，应该对神和生活都充满着希望。</span><br><span class="line">感觉从大学进入团契到现在，神借着他的话语给了自己很多的改变，其中我感觉很重要的一点就是喜乐的生命。虽然生活并不是总是一帆风顺，但是自己知道有那一位可以依靠，就可以少了很多忧愁和烦恼，自己在学校或者团契中很多时候也很开心，因为自己感觉只有自己在生活中有一颗喜乐的心，才会更加愿意与神亲近，才能托住自己的信仰生活，让自己避免很多软弱的破口。除了喜乐的心，还有很重要的一点就是忍耐的心，往往这也是很容易让我们软弱的破口。对于我们来说理性和急促的生活方式，往往让我们面对问题的时候，都不会会去等候或者向神寻求帮助，即使当时向神祷告寻求帮助，如果神没有马上回应，自己的心也会有所波动，所以学会忍耐，学会去等候神真的很重要。</span><br><span class="line"></span><br><span class="line">希望每一个爱神的人都能多一点快乐，少一点忧愁，多一点忍耐，少一点急躁。。。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>读经分享1</title>
    <url>/2019/11/08/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E8%AF%BB%E7%BB%8F%E5%88%86%E4%BA%AB/</url>
    <content><![CDATA[<h3 id="晨读感动分享"><a href="#晨读感动分享" class="headerlink" title="晨读感动分享"></a>晨读感动分享</h3><blockquote>
<p>今天早上和国鑫读了林前1-4，自己有了一些感动，也分享了出来，分享的很乱，这里记录总结一下，未来共勉</p>
</blockquote>
<p>分享起点:</p>
<blockquote>
<p>因为我曾定了主意，在你们中间不知道别的，只知道耶稣基督并他钉十字架。(哥林多前书 2:2 和合本)</p>
<p>回想来大学团契两年多了，经历了很多事情，自己对神的认识和个人的生命也在一点点长进，或许很慢，但是自己却很满足，自己周围有一群能让自己头疼和高兴的小伙伴也很感恩神的带领。</p>
<p>今天读完这段经文后，自己仔细想了自己目前的生命状况，然后我问了国鑫这样一个问题: “你什么时候开始接受神在自己生命中掌权做王？”<br>国鑫回答我说:”可能到现在我还没有做到过….”</p>
<p>自己很喜欢，可能也是唯一喜欢的几个动漫角色就是东京喰种中的 金木和他的好伙伴永近英良,为什么呢，因为感觉他们很值得我去学习，学习什么呢？——-用心去爱自己在乎的人，无论家人、朋友、或是只有几面之缘的陌生人。可能这只是一部动漫，但在我的眼里，我看出了一个不一样的生命。如果可能生活会削平一个人的棱角，但是削不平一个人的心，生活会改变一个人的性格，但是我对你的感情始终如一，(当年永近英良最后一集和金木的对白，直接泪崩) 可能这就是我认为比较好的价值观吧。但是现实往往并不总是如此，很多时候我们都是感性的人，对待自己周围的人更多是爱憎分明，如果你在我心中不是我说希望的那种，可能关系也就这样了。很残酷、确很现实。一个人状态好的时候，看谁可能都是笑的，状态不好的时候可能看自己都烦，哈哈哈。。。。</p>
<p>一个人对待自己周围的人的感觉是否真的会随着生活或者另一个人的变化而改变呢?爱憎分明是否真的符合神的心意呢?</p>
<p>神教导我们说要爱人如己、要有忍耐和恩慈。真正进入生活中，我想所很难做到，其实真的很难，就像你对一个陌生人态度一样，没有关系的建立，怎么能有感情的联系呢！！！今天读到这节经文，联系最近晨读读的四福音书卷，是否我们连最简单的耶稣并他的十字架，也还没有领受。</p>
<p>耶稣对待自己周围的门徒或是其他的人是怎样的态度呢，自己想想，羞愧不已，自己一章一章分享的时候，分享过很多次自己应该向耶稣学习的东西，但是现在想想，这对待人态度，耶稣不就是最好的榜样吗？剩下的属灵的解释就不说了，我想大部分人到这应该都会明白我想表达的</p>
<p>一个人对待生活或者周围人的态度是不应该被一些东西所挟制的，就像耶稣一样，无论环境如何，无论你如何，我对你的态度始终如一 …………………但是也不是说你的坏行为就当被原谅，一个人会犯错，但是是有被原谅的机会的，关键在于你的悔改和改变………..</p>
<p>最近看过一段评论，现在很多人活得很现实，曾经的深情在现在来看可能就叫做====舔狗，哈哈哈，看到这的时候是挺难受的，但还是希望主内的弟兄姊妹能够保守本心，保持着对神的爱，对自己周围人的爱，可能很难，但这条路上我们从来不孤单</p>
</blockquote>
<p>分享终点。。。。。。</p>
<p>不不不</p>
<blockquote>
<p>天气变冷了，还想分享一首我许嵩的&lt;&lt;全球变冷&gt;&gt;<br>天气会变冷，大家的心不要。。。。。</p>
</blockquote>
]]></content>
      <categories>
        <category>信仰</category>
        <category>分享</category>
      </categories>
      <tags>
        <tag>分享</tag>
      </tags>
  </entry>
  <entry>
    <title>机器学习之决策树</title>
    <url>/2019/11/05/%E6%9C%BA%E5%99%A8%E5%AD%A6%E4%B9%A0%E4%B9%8B%E5%86%B3%E7%AD%96%E6%A0%91/</url>
    <content><![CDATA[<h2 id="机器学习之决策树"><a href="#机器学习之决策树" class="headerlink" title="机器学习之决策树"></a>机器学习之决策树</h2><blockquote>
<p>决策树是一个有监督分类与回归算法。<br>决策树的生成只考虑局部最优，相对的，决策树剪枝则考虑全局最优</p>
</blockquote>
<h4 id="1-树模型"><a href="#1-树模型" class="headerlink" title="1 树模型"></a>1 树模型</h4><blockquote>
<p>分类决策树模型是一种描述对实例进行分类的树形结构。结点有两种类型，内部结点表示一个特征或属性，叶结点表示一个类。 用决策树分类，从根结点开始，对实例的某一特征进行测试，根据测试结果，将实例分配到其子节点；这时，每一个子结点对应着该特征的一个取值，如此递归下去，直到到达叶子结点。最后将实例分到叶结点的类中。</p>
</blockquote>
<p>如下图：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-07_10-39-50.png" alt=""></p>
<h4 id="2-划分依据"><a href="#2-划分依据" class="headerlink" title="2 划分依据"></a>2 划分依据</h4><h5 id="①-熵"><a href="#①-熵" class="headerlink" title="① 熵"></a>① 熵</h5><blockquote>
<p>物理学上，熵 Entropy 是“混乱” 程度的量度。<br>系统越有序，熵值越低；系统越混乱或者分散，熵值越高.</p>
</blockquote>
<h5 id="②-熵计算公式"><a href="#②-熵计算公式" class="headerlink" title="② 熵计算公式"></a>② 熵计算公式</h5><p><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/20200202234517.png" alt=""></p>
<blockquote>
<p>其中pi表示分类选择的概率，log2pi为信息定义</p>
</blockquote>
<h5 id="③-特征选择-信息增益"><a href="#③-特征选择-信息增益" class="headerlink" title="③ 特征选择(信息增益)"></a>③ 特征选择(信息增益)</h5><blockquote>
<p>1、以某特征划分数据集前后的熵的差值。熵可以表示样本集合的不确定性，熵越大，样本的不确定性就越大。因此可以使用划分前后集合熵的差值来衡量使用当前特征对于样本集合D划分效果的好坏</p>
</blockquote>
<p>计算方法如下:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">entroy(前)-entroy(后)</span><br><span class="line"><span class="comment"># 表示未划分之前的熵和划分后熵值的差</span></span><br></pre></td></tr></table></figure></p>
<h4 id="3-决策树构建"><a href="#3-决策树构建" class="headerlink" title="3 决策树构建"></a>3 决策树构建</h4><blockquote>
<p>构建决策树就要基于划分依据，进行划分数据信息增益的计算，选择信息增益最大的来进行划分数据，直到求到叶子节点，实现数据集的划分</p>
</blockquote>
<p><strong>例子</strong>:</p>
<p>分类数据如下<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-07_11-00-03.png" alt=""></p>
<ul>
<li>不划分，计算原始的熵<br><img src="https://ws1.sinaimg.cn/large/006QuJaKly1g94vtlo5axj30xc081jrc.jpg" alt=""></li>
<li>如果划分的话第一步，先假设按照outlook这一标准划分，结果如下：<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-07_11-01-44.png" alt=""></li>
<li>分别计算这三种类别的熵，然后计算三种类别的总熵(概率和熵值得乘积之和)<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/20200202234907.png" alt=""><br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/20200202234920.png" alt=""></li>
<li>计算信息增益，IG(outlook)=0.940−0.694=0.246</li>
<li>分别计算另外两种划分的信息增益率，然后构建第一层决策树<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-07_11-10-34.png" alt=""></li>
<li>接着在每一种类别下再进行划分，直到每个节点下只有一个分类，即叶子节点，如下图<br><img src="https://hexo-1257711631.cos.ap-nanjing.myqcloud.com/Snipaste_2019-11-07_11-12-33.png" alt=""></li>
</ul>
<h4 id="4-代码示例"><a href="#4-代码示例" class="headerlink" title="4 代码示例"></a>4 代码示例</h4><p>略</p>
<h4 id="5-参考文章"><a href="#5-参考文章" class="headerlink" title="5 参考文章"></a>5 参考文章</h4><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/sinat_30353259/</span>article<span class="regexp">/details/</span><span class="number">80917362</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>机器学习</category>
      </categories>
      <tags>
        <tag>决策树</tag>
      </tags>
  </entry>
  <entry>
    <title>Python魔术方法</title>
    <url>/2019/11/04/Python%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95/</url>
    <content><![CDATA[<h2 id="Python魔术方法"><a href="#Python魔术方法" class="headerlink" title="Python魔术方法"></a>Python魔术方法</h2><p>在Python中，所有以“__”双下划线包起来的方法，都统称为“Magic Method”,这里对一些常用的魔术方法进行总结</p>
<h3 id="1、特殊的一些通用属性"><a href="#1、特殊的一些通用属性" class="headerlink" title="1、特殊的一些通用属性"></a>1、特殊的一些通用属性</h3><div class="table-container">
<table>
<thead>
<tr>
<th>魔术方法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>name</strong></td>
<td>类、函数、方法等的名字</td>
</tr>
<tr>
<td><strong>module</strong></td>
<td>类定义所在的模块</td>
</tr>
<tr>
<td><strong>class</strong></td>
<td>对象或类所属的类</td>
</tr>
<tr>
<td><strong>bases</strong></td>
<td>当前类的基类(父类)</td>
</tr>
<tr>
<td><strong>doc</strong></td>
<td>类、函数的文档帮助，没有定义为None</td>
</tr>
<tr>
<td><strong>mro</strong></td>
<td>Method Resolution Order 方法解析顺序 </td>
</tr>
<tr>
<td><strong>dict</strong></td>
<td>类或实例的属性，可写的字典,包含一个类的各种属性方法</td>
</tr>
<tr>
<td><strong>dir</strong></td>
<td>返回类或者对象的所有成员名称列表</td>
</tr>
</tbody>
</table>
</div>
<h3 id="2、-对象的创建、初始化、销毁"><a href="#2、-对象的创建、初始化、销毁" class="headerlink" title="2、 对象的创建、初始化、销毁"></a>2、 对象的创建、初始化、销毁</h3><div class="table-container">
<table>
<thead>
<tr>
<th>魔术方法</th>
<th>功能</th>
</tr>
</thead>
<tbody>
<tr>
<td><strong>new</strong></td>
<td>对象创建</td>
</tr>
<tr>
<td><strong>init</strong></td>
<td>对象初始化</td>
</tr>
<tr>
<td><strong>del</strong></td>
<td>对象的销毁</td>
</tr>
</tbody>
</table>
</div>
<a id="more"></a>
<blockquote>
<p>当生成对象之前先调用的是<strong>new</strong>方法，接受的参数是cls类，然后返回类的实例，<br>当对象创建完成后，接受self参数需要对对象进行初始化，调用的就是<strong>init</strong>方法，<br>当对象的生命周期调用结束时，调用的是<strong>del</strong>析构方法,进行对象的删除，释放变量信息</p>
</blockquote>
<p>示例代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Student</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, name)</span>:</span></span><br><span class="line">        print(<span class="string">'正在new.....'</span>)</span><br><span class="line">        <span class="comment"># 不知道new方法是做什么的, 那么就直接返回父类的new方法</span></span><br><span class="line">        <span class="keyword">return</span>  super(Student, cls).__new__(cls)</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 初始化(构造)方法: 创建对象时自动执行</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">"正在初始化对象....."</span>)</span><br><span class="line">        self.name = name</span><br><span class="line"> </span><br><span class="line">    <span class="comment"># 析构方法: 对象删除时自动调用</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__del__</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"正在删除对象....."</span>)</span><br><span class="line"> </span><br><span class="line"><span class="comment"># 当程序运行结束之后, 会自动释放变量信息. 会自动调用析构方法;</span></span><br><span class="line">s = Student(<span class="string">'张三'</span>)</span><br><span class="line">print(s.name)</span><br></pre></td></tr></table></figure>
<blockquote>
<p>回想一下之前写过的单例模式中实现的一个方法，就是在<strong>init</strong>之前先在<strong>new</strong>方法中判断实例是否存在，如果存在，就返回已经存在的实例，如果不存在再创建新的实例</p>
</blockquote>
<h3 id="3、-属性控制访问"><a href="#3、-属性控制访问" class="headerlink" title="3、 属性控制访问"></a>3、 属性控制访问</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__getattr__(self, name):</span><br><span class="line"><span class="comment"># 该方法定义了你试图访问一个不存在的属性时的行为。</span></span><br><span class="line"><span class="comment"># 因此，重载该方法可以实现捕获错误拼写然后进行重定向, 或者对一些废弃的属性进行警告。</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__setattr__(self, name, value)</span><br><span class="line"><span class="comment">#与__getattr__(self, name)不同，__setattr__ 是一个封装的解决方案。无论属性是否存在，它都允许你定义对对属性的赋值行为，以为这你可以对属性的值进行个性定制。实现__setattr__时要避免"无限递归"的错误</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__delattr__:</span><br><span class="line"><span class="comment"># 与 __setattr__ 相同，但是功能是删除一个属性而不是设置他们。实现时也要防止无限递归现象发生</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__getattribute__(self, name):</span><br><span class="line"><span class="comment"># __getattribute__定义了你的属性被访问时的行为，相比较，__getattr__只有该属性不存在时才会起作用。</span></span><br><span class="line"><span class="comment"># 因此，在支持__getattribute__的Python版本,调用__getattr__前必定会调用 __getattribute__。__getattribute__同样要避免"无限递归"的错误。</span></span><br><span class="line"><span class="comment"># 需要提醒的是，最好不要尝试去实现__getattribute__,因为很少见到这种做法，而且很容易出bug。</span></span><br></pre></td></tr></table></figure>
<p>实例代码:<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Access</span><span class="params">(object)</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(Access, self).__getattr__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__setattr__</span><span class="params">(self, name, value)</span>:</span></span><br><span class="line">        print(<span class="string">'__setattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(Access, self).__setattr__(name, value)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__delattr__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__delattr__'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(Access, self).__delattr__(name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__getattribute__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        print(<span class="string">'__getattribute__'</span>)</span><br><span class="line">        <span class="keyword">return</span> super(Access, self).__getattribute__(name)</span><br><span class="line"></span><br><span class="line">access = Access()</span><br><span class="line">access.attr1 = <span class="literal">True</span>  <span class="comment"># __setattr__调用</span></span><br><span class="line">access.attr1  <span class="comment"># 属性存在,只有__getattribute__调用</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    access.attr2  <span class="comment"># 属性不存在, 先调用__getattribute__, 后调用__getattr__</span></span><br><span class="line"><span class="keyword">except</span> AttributeError:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">del</span> access.attr1  <span class="comment"># __delattr__调用</span></span><br></pre></td></tr></table></figure></p>
<h3 id="4、自定义容器的方法"><a href="#4、自定义容器的方法" class="headerlink" title="4、自定义容器的方法"></a>4、自定义容器的方法</h3><blockquote>
<p>可以利用 <strong>setitem</strong> 、<strong>getitem</strong>、 <strong>iter</strong> 等等实现可变容器和不可变的容器，例如可变(list.dict),不可变(string,tuple).</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__len__(self):</span><br><span class="line"><span class="comment">#返回容器长度，对于可变和不可变都是其中的一部分</span></span><br><span class="line">__getitem__(self,key):</span><br><span class="line"><span class="comment"># 定义当某一项被访问时，使用self[key]所产生的行为。这也是不可变容器和可变容器协议的一部分。</span></span><br><span class="line"><span class="comment"># 如果键的类型错误将产生TypeError；如果key没有合适的值则产生KeyError</span></span><br><span class="line">__setitem__(self,key,value):</span><br><span class="line"><span class="comment"># 当你执行self[key] = value时，调用的是该方法。</span></span><br><span class="line">__delitem__(self,key):</span><br><span class="line"><span class="comment"># 定义当一个项目被删除时的行为(比如 del self[key])。这只是可变容器协议中的一部分。</span></span><br><span class="line"><span class="comment"># 当使用一个无效的键时应该抛出适当的异常</span></span><br><span class="line">__reversed__(self):</span><br><span class="line"><span class="comment"># 实现当reversed()被调用时的行为。应该返回序列反转后的版本。仅当序列可以是有序的时候实现它，例如对于列表或者元组。</span></span><br><span class="line">__contains__(self, item):</span><br><span class="line"><span class="comment"># 定义了调用in和not in来测试成员是否存在的时候所产生的行为。</span></span><br><span class="line"><span class="comment"># 你可能会问为什么这个不是序列协议的一部分？因为当__contains__没有被定义的时候，如果没有定义，那么Python会迭代容器中的元素来一个一个比较，从而决定返回True或者False。</span></span><br><span class="line">__missing__(self, key):</span><br><span class="line"><span class="comment"># dict字典类型会有该方法，它定义了key如果在容器中找不到时触发的行为。</span></span><br><span class="line"><span class="comment"># 比如d = &#123;'a': 1&#125;, 当你执行d[notexist]时，d.__missing__['notexist']就会被调用。</span></span><br></pre></td></tr></table></figure>
<h3 id="5、反射"><a href="#5、反射" class="headerlink" title="5、反射"></a>5、反射</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__instancecheck__(self, instance):</span><br><span class="line"><span class="comment"># 检查一个实例是不是你定义的类的实例</span></span><br><span class="line">__subclasscheck__(self, subclass):</span><br><span class="line"><span class="comment"># 检查一个类是不是你定义的类的子类</span></span><br></pre></td></tr></table></figure>
<h3 id="6、可调用对象"><a href="#6、可调用对象" class="headerlink" title="6、可调用对象"></a>6、可调用对象</h3><blockquote>
<p>在Python中，一个特殊的魔术方法可以让类的实例的行为表现的像函数一样，你可以调用它们，将一个函数当做一个参数传到另外一个函数中等等。这是一个非常强大的特性。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__call__(self, [args...]):</span><br><span class="line"><span class="comment"># 允许一个类的实例像函数一样被调用。实质上说，这意味着 x() 与 x.__call__() 是相同的。</span></span><br><span class="line"><span class="comment"># 注意 __call__ 的参数可变。这意味着你可以定义 __call__ 为其他你想要的函数，无论有多少个参数。</span></span><br></pre></td></tr></table></figure>
<p>应用实例:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Entity</span>:</span> </span><br><span class="line">    <span class="string">""" </span></span><br><span class="line"><span class="string">    调用实体来改变实体的位置 </span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, x, y)</span>:</span> </span><br><span class="line">        self.x, self.y = x, y </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__call__</span><span class="params">(self, x, y)</span>:</span> </span><br><span class="line">        <span class="string">""" </span></span><br><span class="line"><span class="string">        改变实体的位置 </span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.x, self.y = x, y</span><br><span class="line"></span><br><span class="line">e = Entity(<span class="number">3</span>,<span class="number">5</span>)</span><br><span class="line">e(<span class="number">5</span>,<span class="number">6</span>)</span><br><span class="line">print(e.x,e.y)</span><br><span class="line"></span><br><span class="line"><span class="string">'''output:</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">5 6</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">'''</span></span><br></pre></td></tr></table></figure>
<h3 id="7、上下文管理"><a href="#7、上下文管理" class="headerlink" title="7、上下文管理"></a>7、上下文管理</h3><blockquote>
<p>还记得在打开文件的with语句吗，在with声明的代码段中，我们可以做一些对象的开始操作和退出操作,还能对异常进行处理。这需要实现两个魔术方法: <strong>enter</strong> 和 <strong>exit</strong>。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">__enter__(self):</span><br><span class="line"><span class="comment"># 定义了当使用with语句的时候，会话管理器在块被初始创建时要产生的行为。</span></span><br><span class="line"><span class="comment"># 请注意，__enter__的返回值与with语句的目标或者as后的名字绑定。</span></span><br><span class="line">__exit__(self, exception_type, exception_value, traceback):</span><br><span class="line"><span class="comment"># 定义了当一个代码块被执行或者终止后，会话管理器应该做什么。它可以被用来处理异常、执行清理工作或做一些代码块执行完毕之后的日常工作。如果代码块执行成功，exception_type，exception_value，和traceback将会为None。否则，你可以选择处理这个异常或者是直接交给用户处理。如果你想处理这个异常的话，请确保__exit__在所有语句结束之后返回True。如果你想让异常被会话管理器处理的话，那么就让其产生该异常。</span></span><br></pre></td></tr></table></figure>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">with</span> open(<span class="string">'foo.txt'</span>) <span class="keyword">as</span> bar: </span><br><span class="line">    <span class="comment"># do something with bar</span></span><br><span class="line"><span class="comment"># 当使用with语句时先调用__enter__返回bar对象，然后使用bar对象处理上下文，最后代码执行完后再调用__exit__,处理上下文结果</span></span><br></pre></td></tr></table></figure>
<h3 id="8、复制"><a href="#8、复制" class="headerlink" title="8、复制"></a>8、复制</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">__copy__(self):</span><br><span class="line"><span class="comment"># 实现复制中的浅拷贝</span></span><br><span class="line">__deepcopy__(self, memodict=&#123;&#125;):</span><br><span class="line"><span class="comment"># 定义了当对你的类的实例调用copy.deepcopy()时所产生的行为。</span></span><br><span class="line"><span class="comment"># copy.deepcopy()返回了你的对象的一个深拷贝——对象和其数据都被拷贝了。</span></span><br><span class="line"><span class="comment"># memodict是对之前被拷贝的对象的一个缓存——这优化了拷贝过程并且阻止了对递归数据结构拷贝时的无限递归。</span></span><br></pre></td></tr></table></figure>
<h3 id="9、总结"><a href="#9、总结" class="headerlink" title="9、总结"></a>9、总结</h3><blockquote>
<p>学习魔术方法，会让我们对于平时调用函数或者使用一些内置方法时更明白其原理，在后面的学习中我也会尝试使用魔术方法来实现一些基础的类作为实践</p>
</blockquote>
<h3 id="10、参考文章"><a href="#10、参考文章" class="headerlink" title="10、参考文章"></a>10、参考文章</h3><blockquote>
<p><a href="https://www.cnblogs.com/pyxiaomangshe/p/7927540.html" target="_blank" rel="noopener">https://www.cnblogs.com/pyxiaomangshe/p/7927540.html</a></p>
</blockquote>
]]></content>
      <categories>
        <category>Python基础</category>
      </categories>
      <tags>
        <tag>技巧</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式5</title>
    <url>/2019/11/03/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F5/</url>
    <content><![CDATA[<h2 id="Python设计模式5-适配器模式-结构型"><a href="#Python设计模式5-适配器模式-结构型" class="headerlink" title="Python设计模式5(适配器模式-结构型)"></a>Python设计模式5(适配器模式-结构型)</h2><blockquote>
<p>当我们希望把一个老组件用于一个新组系统或者把一个新组件应用于老系统中，同时在代码无法修改的，或者说无法访问这些代码时（在实际开发中，旧系统的代码修改后牵一而动全身，很容易引起系统的崩溃。）。这时候，我们可以编写一个额外的代码层，该代码层包含让这两个接口之间能够通信需要进行的所有修改,通俗的来讲就是构建一个适配器可以将一个类接口转换为需要的一个接口</p>
</blockquote>
<h3 id="1-简单举例"><a href="#1-简单举例" class="headerlink" title="1 简单举例"></a>1 简单举例</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Target</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"普通请求"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adaptee</span><span class="params">(object)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">specific_request</span><span class="params">(self)</span>:</span></span><br><span class="line">    print(<span class="string">"特殊请求"</span>)</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span><span class="params">(Target)</span>:</span></span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.adaptee = Adaptee()</span><br><span class="line">  <span class="function"><span class="keyword">def</span> <span class="title">request</span><span class="params">(self)</span>:</span></span><br><span class="line">    self.adaptee.specific_request()</span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">  target = Adapter()</span><br><span class="line">  target.request()</span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面的例子中可以看出来两个类有不同的print需求，通过建立一个适配器Adapter类,将下一个类的print功能和Target类相契合</p>
</blockquote>
<h3 id="2-复杂一点的举例"><a href="#2-复杂一点的举例" class="headerlink" title="2 复杂一点的举例"></a>2 复杂一点的举例</h3><p>增加类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Synthesizer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'the &#123;&#125; synthesizer'</span>.format(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">play</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'is playing an electronic song'</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Human</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'&#123;&#125; the human'</span>.format(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">speak</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'says hello'</span></span><br></pre></td></tr></table></figure>
<p>原有类：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'the &#123;&#125; computer'</span>.format(self.name)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">execute</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'executes a program'</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面可以看出来，新增加的类主要在执行类play()和speak()和原始类不一样，而对于执行系统来说，都要使用obj.excute()来执行，这样就需要构建一个适配器来实现来设计类调用</p>
</blockquote>
<p>增加适配器:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Adapter</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, obj, adapted_methods)</span>:</span></span><br><span class="line">        self.obj = obj</span><br><span class="line">        self.__dict__.update(adapted_methods)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> str(self.obj)</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">new_main</span><span class="params">()</span>:</span></span><br><span class="line">    objects = [Computer(<span class="string">'Asus'</span>)]</span><br><span class="line">    synth = Synthesizer(<span class="string">'moog'</span>)</span><br><span class="line">    objects.append(Adapter(synth, dict(execute=synth.play)))</span><br><span class="line">    human = Human(<span class="string">'Bob'</span>)</span><br><span class="line">    objects.append(Adapter(human, dict(execute=human.speak)))</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> objects:</span><br><span class="line">        print(<span class="string">'&#123;&#125; &#123;&#125;'</span>.format(str(i), i.execute()))</span><br><span class="line">        print(<span class="string">'type is &#123;&#125;'</span>.format(type(i)))</span><br></pre></td></tr></table></figure>
<p>输出：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">the Asus computer executes a program</span><br><span class="line">type <span class="keyword">is</span> &lt;<span class="class"><span class="keyword">class</span> '<span class="title">__main__</span>.<span class="title">Computer</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">the</span> <span class="title">moog</span> <span class="title">synthesizer</span> <span class="title">is</span> <span class="title">playing</span> <span class="title">an</span> <span class="title">electronic</span> <span class="title">song</span></span></span><br><span class="line"><span class="class"><span class="title">type</span> <span class="title">is</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">Adapter</span>'&gt;</span></span><br><span class="line"><span class="class"><span class="title">Bob</span> <span class="title">the</span> <span class="title">human</span> <span class="title">says</span> <span class="title">hello</span></span></span><br><span class="line"><span class="class"><span class="title">type</span> <span class="title">is</span> &lt;<span class="title">class</span> '<span class="title">__main__</span>.<span class="title">Adapter</span>'&gt;</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>这里用到了python魔术方法中的<strong>dict</strong>,具体可参考我的文章。。。，这里主要的实现功能和上一个例子，就是只改适配器中内容而改变其它两个类中的功能函数</p>
</blockquote>
<h3 id="3-实际应用"><a href="#3-实际应用" class="headerlink" title="3 实际应用"></a>3 实际应用</h3><blockquote>
<p>比如电商平台中，货币的支持这个功能，可能刚开始只支持pay一种货币，后面需要支持别的货币，这时候就需要针对不同货币的付款金额，实现pay的接口适配</p>
</blockquote>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>结构型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>HOG+SVM实现病理细胞检测</title>
    <url>/2019/11/01/HOG-SVM%E5%AE%9E%E7%8E%B0%E7%97%85%E7%90%86%E7%BB%86%E8%83%9E%E6%A3%80%E6%B5%8B/</url>
    <content><![CDATA[<h2 id="HOG-SVM实现病理细胞检测"><a href="#HOG-SVM实现病理细胞检测" class="headerlink" title="HOG+SVM实现病理细胞检测"></a>HOG+SVM实现病理细胞检测</h2><h4 id="1-数据分析与处理"><a href="#1-数据分析与处理" class="headerlink" title="1 数据分析与处理"></a>1 数据分析与处理</h4><blockquote>
<p>这里获取到的数据有两部分，一部分是带标注xml的正样本，一部分是不带xml的负样本，这里感觉负样本和正样本差别有点大，后面处理需要注意一下</p>
<p>这里处理数据主要有两个部分，一个部分是获取用于训练的正样本，需要通过xml从大图中提取出来，另一部分是用于训练的负样本，因为没有提供xml文件，需要我们自己分割出来用于训练，我这里采用随机分割的方法，选取一部分负样本，每张图片随机分割出来一部分图片用于训练</p>
</blockquote>
<p>分割正样本代码:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">from</span> skimage.feature <span class="keyword">import</span> hog  </span><br><span class="line"><span class="keyword">from</span> sklearn.externals <span class="keyword">import</span> joblib  </span><br><span class="line"><span class="keyword">import</span> xml.dom.minidom <span class="keyword">as</span> xdm  </span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np  </span><br><span class="line"><span class="keyword">from</span> PIL <span class="keyword">import</span> Image </span><br><span class="line"><span class="keyword">import</span> cv2  </span><br><span class="line"><span class="keyword">import</span> os  </span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">from</span> config <span class="keyword">import</span> *</span><br><span class="line">  </span><br><span class="line"></span><br><span class="line">train_xml_filePath = <span class="string">'./sig-pos/sig-train-pos-xml/'</span></span><br><span class="line"><span class="comment"># xml path</span></span><br><span class="line">train_pos_restPath = <span class="string">'./sig-pos/sig-train-pos-rest/'</span></span><br><span class="line"><span class="comment"># save path</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">getBox</span><span class="params">(object)</span>:</span>  </span><br><span class="line">    groupId = str(object.getElementsByTagName(<span class="string">"name"</span>)[<span class="number">0</span>].firstChild.data)  <span class="comment"># 细胞类别</span></span><br><span class="line">    bndbox = object.getElementsByTagName(<span class="string">"bndbox"</span>)[<span class="number">0</span>]</span><br><span class="line">    xmin = int(bndbox.childNodes[<span class="number">1</span>].firstChild.data)</span><br><span class="line">    ymin = int(bndbox.childNodes[<span class="number">3</span>].firstChild.data)</span><br><span class="line">    xmax = int(bndbox.childNodes[<span class="number">5</span>].firstChild.data)</span><br><span class="line">    ymax = int(bndbox.childNodes[<span class="number">7</span>].firstChild.data)  </span><br><span class="line">    box = (xmin,ymin,xmax,ymax)   </span><br><span class="line">    <span class="keyword">return</span> box  </span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image_pos</span><span class="params">(filePath)</span>:</span>  </span><br><span class="line">    Data = []  </span><br><span class="line">    num = <span class="number">0</span>  </span><br><span class="line">    <span class="keyword">for</span> childDir <span class="keyword">in</span> os.listdir(filePath):  </span><br><span class="line">        f_im = os.path.join(filePath, childDir)  </span><br><span class="line">        f_xml = os.path.join(train_xml_filePath, <span class="string">'%s.xml'</span> %childDir.split(<span class="string">'.'</span>)[<span class="number">0</span>])</span><br><span class="line">        dom = xdm.parse(f_xml)</span><br><span class="line">        root = dom.documentElement</span><br><span class="line">        objects = root.getElementsByTagName(<span class="string">"object"</span>)</span><br><span class="line">        image = Image.open(f_im) <span class="comment"># open the image</span></span><br><span class="line">        <span class="keyword">for</span> object <span class="keyword">in</span> objects:</span><br><span class="line">            box = getBox(object)  </span><br><span class="line">            region = image.crop(box) <span class="comment"># 分割图片</span></span><br><span class="line">            data = np.asarray(region) <span class="comment"># 数据转换  </span></span><br><span class="line">            data = cv2.resize(data,save_image_size,interpolation=cv2.INTER_CUBIC) <span class="comment"># 插值方法</span></span><br><span class="line">            save_name = os.path.join(train_pos_restPath,<span class="string">"%s.jpg"</span> %str(num))</span><br><span class="line">            cv2.imwrite(save_name,data)</span><br><span class="line">            num += <span class="number">1</span>  </span><br><span class="line">        print(<span class="string">"%d processing: %s"</span> %(num,childDir))</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    save_image_pos(<span class="string">"./sig-pos/sig-train-pos"</span>)</span><br><span class="line"><span class="comment"># 正样本提取了大概4500张左右(100,100)尺寸的患病细胞图片</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>
<p>分割负样本代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line">train_neg_restPath = <span class="string">'./sig-neg/sig-train-neg-rest/'</span></span><br><span class="line">crop_image_size = (<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line">save_image_size = (<span class="number">100</span>,<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image_neg</span><span class="params">(filePath,per_image_amount)</span>:</span></span><br><span class="line">    random.seed(<span class="number">1</span>)</span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    pic_num = <span class="number">0</span></span><br><span class="line">    crop_width,crop_height = crop_image_size</span><br><span class="line">    <span class="keyword">for</span> childDir <span class="keyword">in</span> tqdm(os.listdir(filePath)):</span><br><span class="line">        f_im = os.path.join(filePath, childDir)  </span><br><span class="line">        image = Image.open(f_im)</span><br><span class="line">        width,height = image.size</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> range(per_image_amount):</span><br><span class="line">            x = random.randint(<span class="number">0</span>,width-crop_width<span class="number">-1</span>)</span><br><span class="line">            y = random.randint(<span class="number">0</span>,height-crop_height<span class="number">-1</span>)</span><br><span class="line">            box = (x,y,x+crop_width,y+crop_height)</span><br><span class="line">            region = image.crop(box)</span><br><span class="line">            data = np.asarray(region)</span><br><span class="line">            data = cv2.resize(data,save_image_size,interpolation=cv2.INTER_CUBIC)</span><br><span class="line">            save_name = os.path.join(train_neg_restPath,<span class="string">"%s.jpg"</span> %str(num))</span><br><span class="line">            cv2.imwrite(save_name,data)</span><br><span class="line">            num += <span class="number">1</span></span><br><span class="line">        pic_num += <span class="number">1</span></span><br><span class="line">        <span class="comment"># if pic_num &gt;= 10:</span></span><br><span class="line">        <span class="comment">#     break</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    save_image_neg(<span class="string">"./sig-neg/sig-train-neg"</span>,<span class="number">300</span>)</span><br><span class="line"><span class="comment">#负样本自己只选了部分大图分割，每张大图300张小图，总共10800张小图负样本</span></span><br></pre></td></tr></table></figure>
<p>补：</p>
<blockquote>
<p>因为后面自己感觉随机切割可能无法提取过多的信息，后面尝试了平均切割和在正样本中随机切割一些样本作为负样本，下面是平均切割代码</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">save_image_neg2</span><span class="params">(filePath)</span>:</span> <span class="comment"># 平均切割</span></span><br><span class="line">    num = <span class="number">0</span></span><br><span class="line">    pic_num = <span class="number">0</span></span><br><span class="line">    crop_width,crop_height = crop_image_size</span><br><span class="line">    <span class="keyword">for</span> childDir <span class="keyword">in</span> tqdm(os.listdir(filePath)):</span><br><span class="line">        f_im = os.path.join(filePath, childDir)  </span><br><span class="line">        image = Image.open(f_im)</span><br><span class="line">        width,height = image.size </span><br><span class="line">        <span class="keyword">for</span> x <span class="keyword">in</span> range(<span class="number">0</span>, width-save_image_size[<span class="number">0</span>],slid_step_size2[<span class="number">0</span>]):</span><br><span class="line">            <span class="keyword">for</span> y <span class="keyword">in</span> range(<span class="number">0</span>, height-save_image_size[<span class="number">1</span>],slid_step_size2[<span class="number">1</span>]):</span><br><span class="line">                box = (x,y,x+save_image_size[<span class="number">0</span>],y+save_image_size[<span class="number">1</span>])</span><br><span class="line">                region = image.crop(box)</span><br><span class="line">                data = np.asarray(region)</span><br><span class="line">                data = cv2.resize(data,save_image_size,interpolation=cv2.INTER_CUBIC)</span><br><span class="line">                save_name = os.path.join(train_neg_restPath,<span class="string">"%s.jpg"</span> %str(num))</span><br><span class="line">                cv2.imwrite(save_name,data)</span><br><span class="line">                num += <span class="number">1</span></span><br><span class="line">                <span class="keyword">if</span> num &gt; <span class="number">20000</span>:</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">        pic_num += <span class="number">1</span></span><br></pre></td></tr></table></figure>
<h4 id="2-HOG特征提取"><a href="#2-HOG特征提取" class="headerlink" title="2 HOG特征提取"></a>2 HOG特征提取</h4><blockquote>
<p>HOG，也即方向梯度直方图（Histogram of Oriented Gradient），采用了统计的方式(直方图)进行提取. 其基本思路是将图像局部的梯度统计特征拼接起来作为总特征. 局部特征在这里指的是将图像划分为多个Block, 每个Block内的特征进行联合以形成最终的特征</p>
<p>这里详细的就不解释了，HOG提取特征主要有以下几个方面</p>
</blockquote>
<ul>
<li>Gamma归一化(目的是调节图像的对比度，降低图像局部的阴影和光照变化所造成的影响，同时可以抑制噪音的干扰,相当于灰度化特征一样，如果读入图片时就已经转灰度，可以不用)</li>
<li>计算图像每个像素的梯度（捕获轮廓信息）</li>
<li>为每个细胞单元构建梯度方向直方图</li>
<li>细胞单元组成块，然后归一化(有向量标准，这里使用的L2-Hys)</li>
<li>计算特征数</li>
</ul>
<p>下面举例说明：</p>
<blockquote>
<p>我第一次提取特征，每个细胞像素(10,10),每块(4,4)个细胞,图片大小(100,100),然后每个细胞直方图设置为9个</p>
</blockquote>
<p>如下图：<br><img src="http://ww1.sinaimg.cn/large/006QuJaKly1g8iz5t30x4j33402c0x6p.jpg" alt="1.png"><br>效果如下图:<br><img src="http://ww1.sinaimg.cn/large/006QuJaKly1g8iz6pbmxzj30hs0dcq3d.jpg" alt="Figure_1.png"> <img src="http://ww1.sinaimg.cn/large/006QuJaKly1g8iz714jfoj30hs0dcaaq.jpg" alt="Figure_2.png"></p>
<p>sklearn中提取hog特征关键代码：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">im = cv2.cvtColor(cv2.imread(im_path), cv2.COLOR_BGR2GRAY)     </span><br><span class="line"><span class="keyword">if</span> des_type == <span class="string">"HOG"</span>:</span><br><span class="line">    fd = hog(im,orientations, pixels_per_cell, cells_per_block,block_norm,visualise)</span><br></pre></td></tr></table></figure></p>
<h4 id="3-模型训练"><a href="#3-模型训练" class="headerlink" title="3 模型训练"></a>3 模型训练</h4><blockquote>
<p>这里是二分类问题，所以通过构建线性SVM进行分类，在读取特征后，需要根据类别在label中加入相应的标签后再进行训练</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train_svm</span><span class="params">()</span>:</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Classifiers supported</span></span><br><span class="line">    clf_type = <span class="string">'LIN_SVM'</span></span><br><span class="line"></span><br><span class="line">    fds = []</span><br><span class="line">    labels = []</span><br><span class="line">    <span class="comment"># Load the positive features</span></span><br><span class="line">    <span class="keyword">for</span> feat_path <span class="keyword">in</span> glob.glob(os.path.join(pos_feat_ph,<span class="string">"*.feat"</span>)):</span><br><span class="line">        fd = joblib.load(feat_path)</span><br><span class="line">        fds.append(fd)</span><br><span class="line">        labels.append(<span class="number">1</span>)</span><br><span class="line">    print(<span class="string">"Pos features read over!"</span>)</span><br><span class="line">    <span class="comment"># Load the negative features</span></span><br><span class="line">    <span class="keyword">for</span> feat_path <span class="keyword">in</span> glob.glob(os.path.join(neg_feat_ph,<span class="string">"*.feat"</span>)):</span><br><span class="line">        fd = joblib.load(feat_path)</span><br><span class="line">        fds.append(fd)</span><br><span class="line">        labels.append(<span class="number">0</span>)</span><br><span class="line">    print(<span class="string">"Neg features read over!"</span>)</span><br><span class="line">    <span class="keyword">if</span> clf_type <span class="keyword">is</span> <span class="string">"LIN_SVM"</span>:</span><br><span class="line">        clf = LinearSVC(max_iter = <span class="number">1000</span>)</span><br><span class="line">        print(<span class="string">"Training a Linear SVM Classifier"</span>)</span><br><span class="line">        clf.fit(fds, labels)</span><br><span class="line">        <span class="comment"># If feature directories don't exist, create them</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> os.path.isdir(os.path.split(model_path)[<span class="number">0</span>]):</span><br><span class="line">            os.makedirs(os.path.split(model_path)[<span class="number">0</span>])</span><br><span class="line">        joblib.dump(clf, model_path+model_name)</span><br><span class="line">        print(<span class="string">"Classifier saved to &#123;&#125;"</span>.format(model_path))</span><br></pre></td></tr></table></figure>
<h4 id="4-滑窗预测"><a href="#4-滑窗预测" class="headerlink" title="4 滑窗预测"></a>4 滑窗预测</h4><blockquote>
<p>为了实现在大图上的细胞定位，我们需要对图片进行滑窗预测操作，这是比较简单的操作，但是问题来了？你送入模型训练的正样本都是形态大小不一的图片，如果单独的只滑一个大小的窗口预测的结果会差别很大，所以解决方法是什么?我第一次使用的是改变滑窗大小的方法，但是发现这样预测的结果会根据你变化的窗口重复很多，所以使用了不变滑窗大小，而是通过图片压缩预测，这里使用的是skimage的高斯金字塔，降低分辨率滑窗预测</p>
</blockquote>
<p>代码如下：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">image = cv2.imread(filename)</span><br><span class="line"><span class="comment"># im = imutils.resize(im, width = min(400, im.shape[1]))</span></span><br><span class="line"></span><br><span class="line">clf = joblib.load(model_path+model_name)</span><br><span class="line">sum = <span class="number">0</span></span><br><span class="line"><span class="comment">#List to store the detections</span></span><br><span class="line">detections = []</span><br><span class="line"><span class="comment">#The current scale of the image</span></span><br><span class="line">scale = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> im_scaled <span class="keyword">in</span> pyramid_gaussian(image, downscale = downscale):<span class="comment">#downscale为缩小倍数，后面scale随着缩小倍数进行增加，便于后面回放大小</span></span><br><span class="line">    <span class="comment"># sum += 1</span></span><br><span class="line">    <span class="comment"># print(sum)</span></span><br><span class="line">    <span class="keyword">if</span> im_scaled.shape[<span class="number">0</span>] &lt; min_wdw_sz[<span class="number">1</span>] <span class="keyword">or</span> im_scaled.shape[<span class="number">1</span>] &lt; min_wdw_sz[<span class="number">0</span>]:</span><br><span class="line">        <span class="keyword">break</span></span><br><span class="line">    <span class="keyword">for</span> (x,y,window_image) <span class="keyword">in</span> sliding_window(im_scaled,min_wdw_sz,slid_step_size):</span><br><span class="line">        <span class="keyword">if</span> window_image.shape[<span class="number">0</span>] != min_wdw_sz[<span class="number">1</span>] <span class="keyword">or</span> window_image.shape[<span class="number">1</span>] != min_wdw_sz[<span class="number">0</span>]:</span><br><span class="line">            <span class="keyword">continue</span></span><br><span class="line">        window_image = cv2.resize(window_image,save_image_size,interpolation=cv2.INTER_CUBIC)        </span><br><span class="line">        window_image = color.rgb2gray(window_image)</span><br><span class="line">        fd = hog(window_image, orientations, pixels_per_cell, cells_per_block,block_norm,visualise)</span><br><span class="line">        fd = fd.reshape(<span class="number">1</span>,<span class="number">-1</span>)</span><br><span class="line">        pred = clf.predict(fd)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> pred == <span class="number">1</span>: </span><br><span class="line">            <span class="keyword">if</span> clf.decision_function(fd) &gt; <span class="number">0.5</span>:</span><br><span class="line">                detections.append((int(x * (downscale**scale)), int(y * (downscale**scale)), clf.decision_function(fd), </span><br><span class="line">                int(min_wdw_sz[<span class="number">0</span>] * (downscale**scale)),</span><br><span class="line">                int(min_wdw_sz[<span class="number">1</span>] * (downscale**scale))))</span><br><span class="line">    scale += <span class="number">1</span></span><br></pre></td></tr></table></figure></p>
<h4 id="5-NMS"><a href="#5-NMS" class="headerlink" title="5 NMS"></a>5 NMS</h4><blockquote>
<p>去掉detection任务重复的检测框,原理也就是基于上一步记录的decision_function(到决策边界的距离)，越大的score越高，然后根据score和交并比选择最合适的框</p>
</blockquote>
<p>代码如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">rects = np.array([[x, y, x + w, y + h] <span class="keyword">for</span> (x, y, _, w, h) <span class="keyword">in</span> detections])</span><br><span class="line">sc = [score[<span class="number">0</span>] <span class="keyword">for</span> (x, y, score, w, h) <span class="keyword">in</span> detections]</span><br><span class="line"><span class="comment"># print("sc: ",sc)</span></span><br><span class="line">sc = np.array(sc)</span><br><span class="line">pick = non_max_suppression(rects, probs = sc, overlapThresh = <span class="number">0.3</span>)</span><br><span class="line"><span class="comment"># print("shape, ", pick.shape)</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(xA, yA, xB, yB) <span class="keyword">in</span> pick:</span><br><span class="line">    cv2.rectangle(clone, (xA, yA), (xB, yB), (<span class="number">0</span>, <span class="number">255</span>, <span class="number">0</span>), <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 这里的score获取的是上面预测时获取的离决策平面距离的值，做了归一化处理在0-1之间，这也是一个调参要点</span></span><br></pre></td></tr></table></figure>
<h4 id="6-结果展示"><a href="#6-结果展示" class="headerlink" title="6 结果展示"></a>6 结果展示</h4><p>测试下简单的feature预测：<br><img src="https://ws1.sinaimg.cn/large/006QuJaKly1g93m5ce42oj30pm025wel.jpg" alt="Snipaste_2019-11-19_16-59-39.jpg"><br>小图滑窗预测：<br><img src="https://ws1.sinaimg.cn/large/006QuJaKly1g93m5z1pcsj30dx0dz76c.jpg" alt="Snipaste_2019-11-19_17-01-13.jpg"><br>大图预测：<br><img src="https://ws1.sinaimg.cn/large/006QuJaKly1g93m93mducj30fe0edq6l.jpg" alt="Snipaste_2019-11-19_20-22-06.jpg"></p>
<h4 id="6-改进方向"><a href="#6-改进方向" class="headerlink" title="6 改进方向"></a>6 改进方向</h4><ul>
<li>特征值提取，因为内存原因这里特征提的都比较小，但是训练的数据都比较多，过小的特征值和过多的样本在训练时尤其是负样本会出现很大的误差，这是一个优化方向</li>
<li>训练svm时候还没有考虑迭代次数问题，使用默认的迭代次数，这样过多的训练集过拟合现象为考虑，后面需要评估一下</li>
<li>滑窗，自己使用的高斯金字塔，缩放图片是否会造成过多的特征丢失问题，应该多考虑一下，和原始通过滑窗预测应该比较一下</li>
<li>。。。</li>
</ul>
<h4 id="补："><a href="#补：" class="headerlink" title="补："></a>补：</h4><p>①后面和同学试过了样本扩充，效果不是很好<br>②我自己简单的在正样本中随机划取了一些作为负样本，发现这样对正样本的预测产生了很大的影响，尤其是对于边缘特征提取来说，让正样本的预测效果也变得很差<br>③也通过对数据进行交叉验证</p>
]]></content>
      <categories>
        <category>深度学习</category>
      </categories>
      <tags>
        <tag>目标检测</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式4</title>
    <url>/2019/10/18/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4/</url>
    <content><![CDATA[<hr>
<h2 id="Python设计模式4-建造模式"><a href="#Python设计模式4-建造模式" class="headerlink" title="Python设计模式4(建造模式)"></a>Python设计模式4(建造模式)</h2><blockquote>
<p>我们想要创建一个由多个部分构成的对象，而且它的构成需要一步接一步地完成。 只有当各个部分都创建好，这个对象才算是完整的。这正是建造者设计模式。</p>
<p>在建造模式中，主要有两个角色，一个是指挥者(Director)，一个是建造者(Builder),指挥者指挥建造者建造产品</p>
</blockquote>
<h3 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h3><blockquote>
<p>假如要组装一台电脑，将主板，CPU，内存等部件按照某个稳定的步骤组合，基本过程是不变的，而组成电脑的各个部件却可以是不同性能的，不同价位，或者是不同版本的，当组成电脑的时只需要选择不同的组件就可以按照基本相同的过程造出不同配置的电脑。也就是说建造者模式的意图是将一个复杂对象的构建过程与表示分离，它使用相同的构建步骤作用于不同的子对象以构建出不同表现形式的“复杂对象”</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Computer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, serial_number)</span>:</span></span><br><span class="line">        self.serial = serial_number</span><br><span class="line">        self.memory = <span class="literal">None</span></span><br><span class="line">        self.hdd = <span class="literal">None</span></span><br><span class="line">        self.gpu = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        info = (<span class="string">'Model: &#123;&#125;'</span>.format(self.serial),</span><br><span class="line">                <span class="string">'Memory: &#123;&#125;GB'</span>.format(self.memory),</span><br><span class="line">                <span class="string">'Hard Disk: &#123;&#125;GB'</span>.format(self.hdd),</span><br><span class="line">                <span class="string">'Graphics Card: &#123;&#125;'</span>.format(self.gpu))</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="string">'\n'</span>.join(info)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ComputerBuilder</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.computer = Computer(<span class="string">'AG23385193'</span>)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_memory</span><span class="params">(self, amount)</span>:</span></span><br><span class="line">        self.computer.memory = amount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_hdd</span><span class="params">(self, amount)</span>:</span></span><br><span class="line">        self.computer.hdd = amount</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">configure_gpu</span><span class="params">(self, gpu_model)</span>:</span></span><br><span class="line">        self.computer.gpu = gpu_model</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HardwareEngineer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.builder = <span class="literal">None</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">construct_computer</span><span class="params">(self, memory, hdd, gpu)</span>:</span></span><br><span class="line">        self.builder = ComputerBuilder()</span><br><span class="line">        self.builder.configure_memory(memory),</span><br><span class="line">        self.builder.configure_hdd(hdd),</span><br><span class="line">        self.builder.configure_gpu(gpu)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @property</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">computer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span> self.builder.computer</span><br><span class="line"></span><br><span class="line">    <span class="string">"""</span></span><br><span class="line"><span class="string">def main():</span></span><br><span class="line"><span class="string">    engineer = HardwareEngineer()</span></span><br><span class="line"><span class="string">    engineer.construct_computer(hdd=500, memory=8, gpu='GeForce GTX 650 Ti')</span></span><br><span class="line"><span class="string">    computer = engineer.computer</span></span><br><span class="line"><span class="string">    print(computer)</span></span><br><span class="line"><span class="string">    </span></span><br><span class="line"><span class="string">    Out:</span></span><br><span class="line"><span class="string">    Model: AG23385193</span></span><br><span class="line"><span class="string">    Memory: 8GB</span></span><br><span class="line"><span class="string">    Hard Disk: 500GB</span></span><br><span class="line"><span class="string">    Graphics Card: GeForce GTX 650 T</span></span><br><span class="line"><span class="string">    """</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>从上面代码可以看出建造者模式对于产品建造的细节都在Director(HardwareEngineer)中定义，这里可以控制产品的细节</p>
</blockquote>
<h3 id="2-和工厂模式的区别"><a href="#2-和工厂模式的区别" class="headerlink" title="2 和工厂模式的区别"></a>2 和工厂模式的区别</h3><blockquote>
<p>工厂模式注重的是产品产生的结果，也就是类别上的产生模式，如上一篇文章中的支付方式，而建造模式更注重的是产品的创建方式，如这里面电脑配件的型号等等</p>
</blockquote>
<h3 id="3-实际应用场景"><a href="#3-实际应用场景" class="headerlink" title="3 实际应用场景"></a>3 实际应用场景</h3><blockquote>
<p>比如网页中组件的构成，这里面需要考虑各个小组件的构成和使用，这里就可以使用建造者模式</p>
</blockquote>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式3</title>
    <url>/2019/10/17/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3/</url>
    <content><![CDATA[<hr>
<h2 id="Python设计模式3-工厂模式"><a href="#Python设计模式3-工厂模式" class="headerlink" title="Python设计模式3(工厂模式)"></a>Python设计模式3(工厂模式)</h2><h3 id="1-引入"><a href="#1-引入" class="headerlink" title="1 引入"></a>1 引入</h3><blockquote>
<p>当实际应用，比如数据库连接是，我们输入mysql，就可以实现mysql连接，输入sqlserver就可以创建sqlserver的连接，这样我们只需要输入参数就可以创建相应的对象，实际的创建方法我们并不可见的模式就是工厂模式</p>
</blockquote>
<h3 id="2-简单工厂模式"><a href="#2-简单工厂模式" class="headerlink" title="2 简单工厂模式"></a>2 简单工厂模式</h3><blockquote>
<p>在简单工厂模式中，只提供了一个工厂类，该工厂类处于对产品类进行实例化的中心位置，它知道每一个产品对象的创建细节，并决定何时实例化哪一个产品类</p>
</blockquote>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Fruit</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,weight)</span>:</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.weight = weight</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"这是&#123;&#125;,重量是&#123;&#125;吨，用来生产混合果汁的"</span>.format(self.name, self.weight))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Apple</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,weight)</span>:</span></span><br><span class="line">        super(Apple, self).__init__(name,weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"这是&#123;&#125;,重量是&#123;&#125;吨，用来生产&#123;&#125;罐头的"</span>.format(self.name, self.weight, self.name))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Peer</span><span class="params">(Fruit)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,name,weight)</span>:</span></span><br><span class="line">        super(Peer, self).__init__(name, weight)</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">product</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"这是&#123;&#125;,重量是&#123;&#125;吨，用来生产&#123;&#125;罐头的"</span>.format(self.name, self.weight, self.name))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FruitFactory</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_apple</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">make_peer</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br></pre></td></tr></table></figure>
<p>问题：</p>
<blockquote>
<p>简单工厂模式最大的缺点是当有新产品要加入到系统中时，必须修改工厂类，加入必要的处理逻辑，这违背了“开闭原则”。在简单工厂模式中，所有的产品都是由同一个工厂创建，工厂类职责较重，业务逻辑较为复杂，具体产品与工厂类之间的耦合度高，严重影响了系统的灵活性和扩展性，而工厂方法模式则可以很好地解决这一问题。</p>
</blockquote>
<h3 id="3工厂方法"><a href="#3工厂方法" class="headerlink" title="3工厂方法"></a>3工厂方法</h3><blockquote>
<p>工厂方法模式就是简单工厂模式的进一步抽像。由于面向对象多态性，工厂方法模式保持了简单工厂的有点同时克服了他的缺点。工厂方法模式中，核心的工厂被提升为一个抽象类，将具体的创建工作交给他的子类完成。这个抽象的工厂类仅规定具体工厂实现的接口，而不明确指出如何实例化一个产品类，这使得工厂方法模式允许系统在不修改原有产品结构的情况下轻松的引进新产品。</p>
</blockquote>
<p>例如：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 1. 先定义不同的支付方式（对应工厂里具体的产品），及每个产品具体的生产细节</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigCat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 关于传参的处理方式一： 有构造函数</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,money)</span>:</span></span><br><span class="line">        self.money = money</span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"收到大猫金融的支付金额&#123;0&#125;"</span>.format(self.money))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChat</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        self.money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        print(<span class="string">"收到微信支付的金额&#123;0&#125;"</span>.format(money))</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhiFuBao</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        self.money = money</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">pay</span><span class="params">(self)</span>:</span></span><br><span class="line">        print(<span class="string">"收到支付宝支付的金额&#123;0&#125;"</span>.format(self.money))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2. 为每个支付方式(每个产品）定义特定的工厂,每个工厂都有具体的工厂方法函数，负责返回</span></span><br><span class="line"><span class="comment"># 具体的工厂方法函数，其实就是对每个产品具体的生产细节进行了包装，让外部使用者只能用，却不知道具体的生产过程细节</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 3. 对外只提供这些特定的工厂（接口）</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">BigCatFactory</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self,money)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>  BigCat(money)</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">WeChatFactory</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>  WeChat()</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ZhiFuBaoFactory</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">create</span><span class="params">(self, money)</span>:</span></span><br><span class="line">        <span class="keyword">return</span>  ZhiFuBao(money)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">### 4 抽象工厂模式</span></span><br><span class="line"></span><br><span class="line">&gt;抽象工厂模式是所有形式的工厂模式中最为抽象和最具一般性的一种形式。当系统所提供的工厂生产的具体产品并不是一个简单的对象，而是多个位于不同产品等级结构、属于不同类型的具体产品时就可以使用抽象工厂模式 ，抽象工厂模式中的具体工厂不只是创建一种产品，它负责创建一族产品 当一个工厂等级结构可以创建出分属于不同产品等级结构的一个产品族中的所有对象时，抽象工厂模式比工厂方法模式更为简单、更有效率</span><br><span class="line"></span><br><span class="line">基于工厂方法的例子：</span><br><span class="line"></span><br><span class="line">```python</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">FactoryProducer</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_factory</span><span class="params">(self,name)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> name == <span class="string">"BigCat"</span>:</span><br><span class="line">            <span class="keyword">return</span> BigCatFactory()</span><br><span class="line">        <span class="keyword">elif</span> name == <span class="string">"WeChat"</span></span><br><span class="line">            <span class="keyword">return</span> WeChatFactory()</span><br><span class="line">        <span class="keyword">else</span>:</span><br><span class="line">            <span class="keyword">return</span> ZhiFuBaoFactory()</span><br><span class="line"><span class="comment"># 相对于工厂方法，抽象工厂方法具体创建了一个接口来访问整个工厂，这样更加具有封装性</span></span><br></pre></td></tr></table></figure>
<h3 id="5总结"><a href="#5总结" class="headerlink" title="5总结"></a>5总结</h3><blockquote>
<p>上面这些工厂方法的封装性都不断增强，这样符合开闭原则，但是会对底层修改带来很大麻烦。</p>
</blockquote>
<p>适用场景：</p>
<blockquote>
<p>一个系统不应当依赖于产品类实例如何被创建、组合和表达的细节 系统中有多于一个的产品族，但每次只使用其中某一产品族 属于同一个产品族的产品将在一起使用，这一约束必须在系统的设计中体现出来 产品等级结构稳定，设计完成之后，不会向系统中增加新的产品等级结构或者删除已有的产品等级结构</p>
</blockquote>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式2</title>
    <url>/2019/10/16/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F2/</url>
    <content><![CDATA[<h2 id="Python设计模式2-原型模式"><a href="#Python设计模式2-原型模式" class="headerlink" title="Python设计模式2(原型模式)"></a>Python设计模式2(原型模式)</h2><blockquote>
<p>原型模式关注的是大量相同对象或相似对象的创建问题，意图在于通过复制一个已经存在的实例来获得一个新的实例，以避免重复创建此类实例带来的开销。被复制的实例就是这个“原型”，这个原型是可定制的。</p>
</blockquote>
<h3 id="一-浅拷贝与深拷贝"><a href="#一-浅拷贝与深拷贝" class="headerlink" title="一 浅拷贝与深拷贝"></a>一 浅拷贝与深拷贝</h3><blockquote>
<p>在浅拷贝时，拷贝出来的新对象的地址和原对象是不一样的，但是新对象里面的可变元素（如列表）的地址和原对象里的可变元素的地址是相同的，也就是说浅拷贝它拷贝的是浅层次的数据结构（不可变元素），对象里的可变元素作为深层次的数据结构并没有被拷贝到新地址里面去，而是和原对象里的可变元素指向同一个地址，所以在新对象或原对象里对这个可变元素做修改时，两个对象是同时改变的，但是深拷贝不会这样，这个是浅拷贝相对于深拷贝最根本的区别。</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line">a=[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,[<span class="string">'a'</span>,<span class="string">'b'</span>]]</span><br><span class="line"><span class="comment">#原始对象</span></span><br><span class="line">b=a<span class="comment">#赋值，传对象的引用</span></span><br><span class="line">c=copy.copy(a)<span class="comment">#对象拷贝，浅拷贝</span></span><br><span class="line">d=copy.deepcopy(a)<span class="comment">#对象拷贝，深拷贝</span></span><br><span class="line"></span><br><span class="line">a.append(<span class="number">6</span>)<span class="comment">#修改对象a</span></span><br><span class="line">a[<span class="number">5</span>].append(<span class="string">'c'</span>)<span class="comment">#修改对象a中的['a','b']数组对象</span></span><br></pre></td></tr></table></figure>
<blockquote>
<p>b = a是赋值操作符，所以a和b都是同一块地址的不同引用，无论a怎么变b和a的对象地址和元素地址始终指相同；<br>c = c=copy.copy(a)是浅拷贝，只拷贝可变元素的地址如这里的a[5],所以是浅层的拷贝，如果深层的数据变化 ，因为地址指向一样，所以也会发生变化；<br>d=copy.deepcopy(a) 是深拷贝，会递归拷贝所有对象(这里的拷贝意思是放入新的地址)，所以地址都不一样<br>补充：1、列表切片拷贝属于浅拷贝 2、字典中的copy也是浅拷贝 3、列表作为函数参数传递也是浅拷贝</p>
</blockquote>
<h3 id="二、原型模式的实现"><a href="#二、原型模式的实现" class="headerlink" title="二、原型模式的实现"></a>二、原型模式的实现</h3><h4 id="1-简单类图"><a href="#1-简单类图" class="headerlink" title="1 简单类图"></a>1 简单类图</h4><p><img src="http://ww1.sinaimg.cn/large/006QuJaKly1g80a4ow12mj30cw05rgm8.jpg" alt="undefined"></p>
<blockquote>
<p>原型模式的核心就是clone()函数，</p>
</blockquote>
<h4 id="2-使用举例"><a href="#2-使用举例" class="headerlink" title="2 使用举例"></a>2 使用举例</h4><p>例子：<br><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="comment">#步骤1: 定义object复制类Prototype</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._objects = &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_object</span><span class="params">(self, name, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        注册对象实例</span></span><br><span class="line"><span class="string">        :param name: obj_name -&gt; str</span></span><br><span class="line"><span class="string">        :param obj: object -&gt; object</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._objects[name] = obj</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unregister_object</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        删除对象</span></span><br><span class="line"><span class="string">        :param name: object_name -&gt; str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">del</span> self._objects[name]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clone</span><span class="params">(self, name, **attrs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        从已存在的实例深拷贝一个新实例</span></span><br><span class="line"><span class="string">        :param name: 被copy的实例</span></span><br><span class="line"><span class="string">        :param attrs: 新对象属性</span></span><br><span class="line"><span class="string">        :return: 新对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        old_obj = self._objects.get(name)</span><br><span class="line">        obj_new = copy.deepcopy(old_obj)</span><br><span class="line">        obj_new.__dict__.update(attrs)</span><br><span class="line">        <span class="keyword">return</span> obj_new</span><br><span class="line"> </span><br><span class="line"><span class="comment">#步骤2: 定义产品类</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Demo</span><span class="params">(object)</span>:</span></span><br><span class="line">    value = <span class="string">"Default"</span></span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line">    instance_a = Demo()</span><br><span class="line">    prototype = Prototype()</span><br><span class="line">    prototype.register_object(<span class="string">'instance_a'</span>, instance_a)</span><br><span class="line">    instance_b = prototype.clone(<span class="string">'instance_a'</span>, value=<span class="string">"Hello"</span>, test=<span class="string">"demo"</span>)</span><br><span class="line">    print(instance_a.value)</span><br><span class="line">    print(instance_b.value, instance_b.test)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure></p>
<p>运行结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">Default</span><br><span class="line">Hello demo</span><br></pre></td></tr></table></figure>
<h4 id="3-实际应用"><a href="#3-实际应用" class="headerlink" title="3 实际应用"></a>3 实际应用</h4><blockquote>
<p>很多畅销书籍会经历多个版本的迭代。<br>有变化的信息：价格、长度(页数)以及出版日期。<br>但也有很多相似之处：作者、出版商以及描述该书的标签/关键词都是完全一样的。这表明从头创建一版新书并不总是最佳方式。<br>如果知道两个版本之间的诸多相似之处，则可以先克隆一份，然后仅修改新版本与旧版本之间的不同之处</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> copy</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> OrderedDict</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Prototype</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self._objects = &#123;&#125;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">register_object</span><span class="params">(self, name, obj)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        注册对象实例</span></span><br><span class="line"><span class="string">        :param name: obj_name -&gt; str</span></span><br><span class="line"><span class="string">        :param obj: object -&gt; object</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self._objects[name] = obj</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">unregister_object</span><span class="params">(self, name)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        删除对象</span></span><br><span class="line"><span class="string">        :param name: object_name -&gt; str</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        <span class="keyword">del</span> self._objects[name]</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">clone</span><span class="params">(self, id, **attrs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        从已存在的实例深拷贝一个新实例</span></span><br><span class="line"><span class="string">        :param name: 被copy的实例</span></span><br><span class="line"><span class="string">        :param attrs: 新对象属性</span></span><br><span class="line"><span class="string">        :return: 新对象</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        old_obj = self._objects.get(id)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> old_obj:</span><br><span class="line">            <span class="keyword">raise</span> ValueError(<span class="string">"Incorrect object name"</span>)</span><br><span class="line">        obj_new = copy.deepcopy(old_obj)</span><br><span class="line">        obj_new.__dict__.update(attrs)</span><br><span class="line">        <span class="keyword">return</span> obj_new</span><br><span class="line"> </span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Book</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, name, authors, price, **kwargs)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        初始化书籍公用信息</span></span><br><span class="line"><span class="string">        :param name: 书名</span></span><br><span class="line"><span class="string">        :param authors: 作者</span></span><br><span class="line"><span class="string">        :param price: 价格</span></span><br><span class="line"><span class="string">        :param kwargs: 其他信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        self.name = name</span><br><span class="line">        self.authors = authors</span><br><span class="line">        self.price = price</span><br><span class="line">        self.__dict__.update(kwargs)</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__str__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="string">"""</span></span><br><span class="line"><span class="string">        调用print()时自动打印书籍信息</span></span><br><span class="line"><span class="string">        """</span></span><br><span class="line">        mylist = []</span><br><span class="line">        ordered = OrderedDict(sorted(self.__dict__.items()))</span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> ordered.keys():</span><br><span class="line">            mylist.append(<span class="string">'&#123;&#125;: &#123;&#125;'</span>.format(i, ordered[i]))</span><br><span class="line">            <span class="keyword">if</span> i == <span class="string">'price'</span>:</span><br><span class="line">                mylist.append(<span class="string">'$'</span>)</span><br><span class="line">            mylist.append(<span class="string">'\n'</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">''</span>.join(mylist)</span><br><span class="line"> </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">run</span><span class="params">()</span>:</span></span><br><span class="line"> </span><br><span class="line">    book_1 = Book(<span class="string">"Python核心编程（第一版）"</span>, <span class="string">"宋吉广"</span>, <span class="string">"45.9"</span>, publisher=<span class="string">"邮电出版社"</span>, length=<span class="string">"350页"</span>)</span><br><span class="line">    prototype = Prototype()</span><br><span class="line">    prototype.register_object(<span class="string">'book_1'</span>, book_1)</span><br><span class="line">    book_2 = prototype.clone(<span class="string">'book_1'</span>, name=<span class="string">"Python核心编程（第二版）"</span>, authors=<span class="string">"宋吉广"</span>,</span><br><span class="line">                             price=<span class="string">"75.9"</span>, publisher=<span class="string">"邮电出版社"</span>, length=<span class="string">"550页"</span>)</span><br><span class="line">    print(book_1)</span><br><span class="line">    print(book_2)</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    run()</span><br></pre></td></tr></table></figure>
<h3 id="三、总结"><a href="#三、总结" class="headerlink" title="三、总结"></a>三、总结</h3><blockquote>
<p>原型模式多用于对象创建比较麻烦的，且需要大量创建，但是对象属性只有一部分改变的类中，但是每个类都要有clone方法，如果项目过大就要在设计之前优先考虑了</p>
</blockquote>
<h3 id="四、参考文章"><a href="#四、参考文章" class="headerlink" title="四、参考文章"></a>四、参考文章</h3><figure class="highlight awk"><table><tr><td class="code"><pre><span class="line">https:<span class="regexp">//</span>blog.csdn.net<span class="regexp">/biheyu828/</span>article<span class="regexp">/details/</span><span class="number">92798805</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>Python设计模式1</title>
    <url>/2019/10/15/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/Python%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F1/</url>
    <content><![CDATA[<hr>
<h2 id="Python设计模式1-单例模式"><a href="#Python设计模式1-单例模式" class="headerlink" title="Python设计模式1(单例模式)"></a>Python设计模式1(单例模式)</h2><hr>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote>
<p>单例模式就是确保一个类只有一个实例.当你希望整个系统中,某个类只有一个实例时,单例模式就派上了用场。比如,某个服务器的配置信息存在在一个文件中,客户端通过AppConfig类来读取配置文件的信息.如果程序的运行的过程中,很多地方都会用到配置文件信息,则就需要创建很多的AppConfig实例,这样就导致内存中有很多AppConfig对象的实例,造成资源的浪费.其实这个时候AppConfig我们希望它只有一份,就可以使用单例模式.</p>
</blockquote>
<h3 id="单例模式实现"><a href="#单例模式实现" class="headerlink" title="单例模式实现"></a>单例模式实现</h3><h4 id="1-使用模块"><a href="#1-使用模块" class="headerlink" title="1 使用模块"></a>1 使用模块</h4><blockquote>
<p>python模块就是单例模式的一个体现、因为第一次导入模块的时候会生成.pyc文件，第二次导入时就会加载.pyc文件</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># test.py</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">foo</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line">singleton = Singleton()</span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 通过模块调用</span></span><br><span class="line"><span class="keyword">from</span> test <span class="keyword">import</span> singleton</span><br></pre></td></tr></table></figure>
<h4 id="2-装饰器"><a href="#2-装饰器" class="headerlink" title="2 装饰器"></a>2 装饰器</h4><blockquote>
<p>装饰器里面的外层变量定义一个字典,里面存放这个类的实例.当第一次创建的收,就将这个实例保存到这个字典中.然后以后每次创建对象的时候,都去这个字典中判断一下,如果已经被实例化,就直接取这个实例对象.如果不存在就保存到字典中.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">Singleton</span><span class="params">(cls)</span>:</span></span><br><span class="line">    _instance = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">_singleton</span><span class="params">(*args, **kargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> cls <span class="keyword">not</span> <span class="keyword">in</span> _instance:</span><br><span class="line">            _instance[cls] = cls(*args, **kargs)</span><br><span class="line">        <span class="keyword">return</span> _instance[cls]</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> _singleton</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Singleton</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line">    a = <span class="number">1</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, a)</span>:</span></span><br><span class="line">        self.a = a</span><br><span class="line"></span><br><span class="line">a1 = A(<span class="number">2</span>)</span><br><span class="line">a2 = A(<span class="number">3</span>)</span><br></pre></td></tr></table></figure>
<h4 id="3-加锁类方法"><a href="#3-加锁类方法" class="headerlink" title="3 加锁类方法"></a>3 加锁类方法</h4><blockquote>
<p>多线程调用如果出现堵塞，单纯的类方法无法实现单例模式，这里需要加锁</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self,*args,**kwargs)</span>:</span></span><br><span class="line">        time.sleep(<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="meta">    @classmethod</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">get_instance</span><span class="params">(cls,*args,**kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton,<span class="string">'_instance'</span>):</span><br><span class="line">            <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton,<span class="string">'_instance'</span>):</span><br><span class="line">                    Singleton._instance = Singleton(*args,**kwargs)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    obj = Singleton.get_instance(arg)</span><br><span class="line">    print(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br><span class="line"></span><br><span class="line">obj = Singleton.get_instance()</span><br><span class="line">print(obj)</span><br></pre></td></tr></table></figure>
<h4 id="4-基于new方法实现的单例模式"><a href="#4-基于new方法实现的单例模式" class="headerlink" title="4 基于new方法实现的单例模式"></a>4 基于<strong>new</strong>方法实现的单例模式</h4><blockquote>
<p>一个对象的实例化过程是先执行类的<strong>new</strong>方法,如果我们没有写,默认会调用object的<strong>new</strong>方法,返回一个实例化对象,然后再调用<strong>init</strong>方法,对这个对象进行初始化,我们可以根据这个实现单例.在一个类的<strong>new</strong>方法中先判断是不是存在实例,如果存在实例,就直接返回,如果不存在实例就创建.</p>
</blockquote>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> threading</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span><span class="params">(object)</span>:</span></span><br><span class="line">    _instance_lock = threading.Lock()</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__new__</span><span class="params">(cls, *args, **kwargs)</span>:</span></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton, <span class="string">"_instance"</span>):</span><br><span class="line">            <span class="keyword">with</span> Singleton._instance_lock:</span><br><span class="line">                <span class="keyword">if</span> <span class="keyword">not</span> hasattr(Singleton, <span class="string">"_instance"</span>):</span><br><span class="line">                    Singleton._instance = object.__new__(cls)  </span><br><span class="line">        <span class="keyword">return</span> Singleton._instance</span><br><span class="line"></span><br><span class="line">obj1 = Singleton()</span><br><span class="line">obj2 = Singleton()</span><br><span class="line">print(obj1,obj2)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">task</span><span class="params">(arg)</span>:</span></span><br><span class="line">    obj = Singleton()</span><br><span class="line">    print(obj)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">10</span>):</span><br><span class="line">    t = threading.Thread(target=task,args=[i,])</span><br><span class="line">    t.start()</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>Python设计模式</category>
        <category>创建型</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>从输入url到返回页面发生的事</title>
    <url>/2019/10/14/%E4%BB%8E%E8%BE%93%E5%85%A5url%E5%88%B0%E8%BF%94%E5%9B%9E%E9%A1%B5%E9%9D%A2%E5%8F%91%E7%94%9F%E7%9A%84%E4%BA%8B/</url>
    <content><![CDATA[<h1 id="从输入url到返回页面发生的事"><a href="#从输入url到返回页面发生的事" class="headerlink" title="从输入url到返回页面发生的事"></a>从输入url到返回页面发生的事</h1><h2 id="1-DNS解析"><a href="#1-DNS解析" class="headerlink" title="1.DNS解析"></a>1.DNS解析</h2><h3 id="1-1-定义"><a href="#1-1-定义" class="headerlink" title="1.1 定义"></a>1.1 定义</h3><blockquote>
<p>DNS解析就是将网址解析成IP的过程</p>
</blockquote>
<h3 id="1-2-解析过程"><a href="#1-2-解析过程" class="headerlink" title="1.2 解析过程"></a>1.2 解析过程</h3><blockquote>
<p>DNS解析是递归查询的过程，主要有以下先后关系</p>
</blockquote>
<ul>
<li>先在本地域名服务器查询IP地址</li>
<li>如果上一步未查到，到根域名服务器查询</li>
<li>根域名服务器不存在，则本地域名会向com顶级域名服务器发送请求</li>
</ul>
<h3 id="1-3-DNS缓冲"><a href="#1-3-DNS缓冲" class="headerlink" title="1.3 DNS缓冲"></a>1.3 DNS缓冲</h3><blockquote>
<p>如果每次都这么多查询步骤会特别麻烦，为了优化DNS解析，通过DNS缓冲技术减少请求步骤</p>
</blockquote>
<figure class="highlight http"><table><tr><td class="code"><pre><span class="line"><span class="attribute">DNS存在着多级缓存，从离浏览器的距离排序的话，有以下几种</span>: 浏览器缓存，系统缓存，路由器缓存，IPS服务器缓存，根域名服务器缓存，顶级域名服务器缓存，主域名服务器缓存。</span><br></pre></td></tr></table></figure>
<h3 id="1-4-DNS负载均衡"><a href="#1-4-DNS负载均衡" class="headerlink" title="1.4 DNS负载均衡"></a>1.4 DNS负载均衡</h3><blockquote>
<p>DNS可以返回一个合适的机器的IP给用户，例如可以根据每台机器的负载量，该机器离用户地理位置的距离等等，这种过程就是DNS负载均衡，又叫做DNS重定向，例子如CDN</p>
</blockquote>
<h2 id="2-TCP连接"><a href="#2-TCP连接" class="headerlink" title="2.TCP连接"></a>2.TCP连接</h2><blockquote>
<p>在拿到域名对应的IP地址后，会以随机端口（1024~~65535）向WEB服务器程序80端口发起TCP的连接请求，这个连接请求进入到内核的TCP/IP协议栈（用于识别该连接请求，解封包，一层一层的剥开），还有可能要经过Netfilter防火墙（属于内核的模块）的过滤，最终到达WEB程序，最终建立了TCP/IP的连接，对于客户端与服务器的TCP链接，必然要说的就是『三次握手』</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/006QuJaKly1g7xyonxwj2j30gg097a9w.jpg" alt="undefined"></p>
<h2 id="3-http请求"><a href="#3-http请求" class="headerlink" title="3.http请求"></a>3.http请求</h2><blockquote>
<p>建立TCP连接之后，发起HTTP请求，请求一般分为三部分</p>
</blockquote>
<ul>
<li>请求方法URI协议/版本</li>
<li>请求头(Request Header)</li>
<li>请求正文</li>
</ul>
<h2 id="4-服务端处理"><a href="#4-服务端处理" class="headerlink" title="4.服务端处理"></a>4.服务端处理</h2><blockquote>
<p>服务器端收到请求后的由web服务器（准确说应该是http服务器）处理请求，诸如Apache、Ngnix、IIS等。web服务器解析用户请求，知道了需要调度哪些资源文件，再通过相应的这些资源文件处理用户请求和参数，并调用数据库信息，最后将结果通过web服务器返回给浏览器客户端，这些返回结果以http响应报文形式，有以下几点组成：</p>
</blockquote>
<ul>
<li>状态码</li>
<li>响应头</li>
<li>响应正文</li>
</ul>
<h3 id="4-1-状态码"><a href="#4-1-状态码" class="headerlink" title="4.1 状态码"></a>4.1 状态码</h3><figure class="highlight angelscript"><table><tr><td class="code"><pre><span class="line"><span class="number">1</span>xx：指示信息–表示请求已接收，继续处理。</span><br><span class="line"></span><br><span class="line"><span class="number">2</span>xx：成功–表示请求已被成功接收、理解、接受。</span><br><span class="line"></span><br><span class="line"><span class="number">3</span>xx：重定向–要完成请求必须进行更进一步的操作。</span><br><span class="line"></span><br><span class="line"><span class="number">4</span>xx：客户端错误–请求有语法错误或请求无法实现。</span><br><span class="line"></span><br><span class="line"><span class="number">5</span>xx：服务器端错误–服务器未能实现合法的请求。</span><br></pre></td></tr></table></figure>
<h2 id="5-关闭TCP连接"><a href="#5-关闭TCP连接" class="headerlink" title="5.关闭TCP连接"></a>5.关闭TCP连接</h2><blockquote>
<p>为了避免服务器与客户端双方的资源占用和损耗，当双方没有请求或响应传递时，任意一方都可以发起关闭请求。与创建TCP连接的3次握手类似，关闭TCP连接，需要4次握手。</p>
</blockquote>
<p><img src="http://ww1.sinaimg.cn/large/006QuJaKly1g7xyxx5lnoj30dl0aejr7.jpg" alt="undefined"></p>
<h2 id="6-浏览器资源解析"><a href="#6-浏览器资源解析" class="headerlink" title="6.浏览器资源解析"></a>6.浏览器资源解析</h2><blockquote>
<p>对于返回后的响应正文内容，如css/html/js等等资源，浏览器是一个边解析边渲染的过程。首先浏览器解析HTML文件构建DOM树，然后解析CSS文件构建渲染树，等到渲染树构建完成后，浏览器开始布局渲染树并将其绘制到屏幕上。这个过程比较复杂，涉及到两个概念: reflow(回流)和repain(重绘)。DOM节点中的各个元素都是以盒模型的形式存在，这些都需要浏览器去计算其位置和大小等，这个过程称为relow;当盒模型的位置,大小以及其他属性，如颜色,字体,等确定下来之后，浏览器便开始绘制内容，这个过程称为repain。页面在首次加载时必然会经历reflow和repain。reflow和repain过程是非常消耗性能的，尤其是在移动设备上，它会破坏用户体验，有时会造成页面卡顿。所以我们应该尽可能少的减少reflow和repain，下面是流程图：<br><img src="http://ww1.sinaimg.cn/large/006QuJaKly1g7xz1o7mjcj30hc081wem.jpg" alt="undefined"></p>
</blockquote>
<h2 id="7-总结"><a href="#7-总结" class="headerlink" title="7.总结"></a>7.总结</h2><blockquote>
<p>这里面涉及到一些网页优化问题，后面学习后再次补充</p>
</blockquote>
<h2 id="8-参考文章"><a href="#8-参考文章" class="headerlink" title="8.参考文章"></a>8.参考文章</h2><figure class="highlight dts"><table><tr><td class="code"><pre><span class="line"><span class="symbol">https:</span><span class="comment">//segmentfault.com/a/1190000006879700</span></span><br><span class="line"><span class="symbol">https:</span><span class="comment">//www.cnblogs.com/yuanzhiguo/p/8119470.html</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>web</category>
      </categories>
      <tags>
        <tag>url</tag>
      </tags>
  </entry>
  <entry>
    <title>人间失格第三手札</title>
    <url>/2019/09/29/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC%E7%AC%AC%E4%B8%89%E6%89%8B%E6%9C%AD/</url>
    <content><![CDATA[<h4 id="一、这世上所有人说话总是拐弯抹角，闪烁其词，他们总是试图用这种微妙复杂的说话方式来逃避责任，虽然近乎徒劳无功，但他们还是费尽心机地时刻防范着。"><a href="#一、这世上所有人说话总是拐弯抹角，闪烁其词，他们总是试图用这种微妙复杂的说话方式来逃避责任，虽然近乎徒劳无功，但他们还是费尽心机地时刻防范着。" class="headerlink" title="一、这世上所有人说话总是拐弯抹角，闪烁其词，他们总是试图用这种微妙复杂的说话方式来逃避责任，虽然近乎徒劳无功，但他们还是费尽心机地时刻防范着。"></a>一、这世上所有人说话总是拐弯抹角，闪烁其词，他们总是试图用这种微妙复杂的说话方式来逃避责任，虽然近乎徒劳无功，但他们还是费尽心机地时刻防范着。</h4><h4 id="二、那嗤笑的面影里潜藏着一种近于轻蔑却又不同于轻蔑的东西。倘若把人世间比作一片大海，那么，在大海的万丈深渊里就分明曳动着那种奇妙的影子。我正是透过那种嗤笑，管窥了成年人生活的深层奥秘。"><a href="#二、那嗤笑的面影里潜藏着一种近于轻蔑却又不同于轻蔑的东西。倘若把人世间比作一片大海，那么，在大海的万丈深渊里就分明曳动着那种奇妙的影子。我正是透过那种嗤笑，管窥了成年人生活的深层奥秘。" class="headerlink" title="二、那嗤笑的面影里潜藏着一种近于轻蔑却又不同于轻蔑的东西。倘若把人世间比作一片大海，那么，在大海的万丈深渊里就分明曳动着那种奇妙的影子。我正是透过那种嗤笑，管窥了成年人生活的深层奥秘。"></a>二、那嗤笑的面影里潜藏着一种近于轻蔑却又不同于轻蔑的东西。倘若把人世间比作一片大海，那么，在大海的万丈深渊里就分明曳动着那种奇妙的影子。我正是透过那种嗤笑，管窥了成年人生活的深层奥秘。</h4><h4 id="三、显露在外面的不一定是真的，每个人总有些不为人知的内幕。"><a href="#三、显露在外面的不一定是真的，每个人总有些不为人知的内幕。" class="headerlink" title="三、显露在外面的不一定是真的，每个人总有些不为人知的内幕。"></a>三、显露在外面的不一定是真的，每个人总有些不为人知的内幕。</h4><h4 id="四、同样的事日日反复，只需遵守昨日的惯例，倘若没有过度的欢喜，便不会有极度的悲伤，为了躲避前方的绊脚石，蟾蜍也会迂回前行"><a href="#四、同样的事日日反复，只需遵守昨日的惯例，倘若没有过度的欢喜，便不会有极度的悲伤，为了躲避前方的绊脚石，蟾蜍也会迂回前行" class="headerlink" title="四、同样的事日日反复，只需遵守昨日的惯例，倘若没有过度的欢喜，便不会有极度的悲伤，为了躲避前方的绊脚石，蟾蜍也会迂回前行"></a>四、同样的事日日反复，只需遵守昨日的惯例，倘若没有过度的欢喜，便不会有极度的悲伤，为了躲避前方的绊脚石，蟾蜍也会迂回前行</h4>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>人间失格</tag>
      </tags>
  </entry>
  <entry>
    <title>人间失格第二手札</title>
    <url>/2019/09/29/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC%E7%AC%AC%E4%BA%8C%E6%89%8B%E6%9C%AD/</url>
    <content><![CDATA[<h4 id="一、越是容易对事物感到胆怯的神经质的人，就越是渴望暴风雨降临得更加猛烈"><a href="#一、越是容易对事物感到胆怯的神经质的人，就越是渴望暴风雨降临得更加猛烈" class="headerlink" title="一、越是容易对事物感到胆怯的神经质的人，就越是渴望暴风雨降临得更加猛烈"></a>一、越是容易对事物感到胆怯的神经质的人，就越是渴望暴风雨降临得更加猛烈</h4><h4 id="二、而且他是在无意识种实施着逗笑的丑角行为（伪装），全然没有觉察到这种丑角行为的悲惨。这正是他与我本质上迥然相异的地方"><a href="#二、而且他是在无意识种实施着逗笑的丑角行为（伪装），全然没有觉察到这种丑角行为的悲惨。这正是他与我本质上迥然相异的地方" class="headerlink" title="二、而且他是在无意识种实施着逗笑的丑角行为（伪装），全然没有觉察到这种丑角行为的悲惨。这正是他与我本质上迥然相异的地方"></a>二、而且他是在无意识种实施着逗笑的丑角行为（伪装），全然没有觉察到这种丑角行为的悲惨。这正是他与我本质上迥然相异的地方</h4><h4 id="三、我不敢面对生活中的很多交际，尽量回避那过多的交往"><a href="#三、我不敢面对生活中的很多交际，尽量回避那过多的交往" class="headerlink" title="三、我不敢面对生活中的很多交际，尽量回避那过多的交往"></a>三、我不敢面对生活中的很多交际，尽量回避那过多的交往</h4><h4 id="四、有时候无法面对，就选择逃避（没有欲望，没有感情），只是为了逃离，堕落堕落。"><a href="#四、有时候无法面对，就选择逃避（没有欲望，没有感情），只是为了逃离，堕落堕落。" class="headerlink" title="四、有时候无法面对，就选择逃避（没有欲望，没有感情），只是为了逃离，堕落堕落。"></a>四、有时候无法面对，就选择逃避（没有欲望，没有感情），只是为了逃离，堕落堕落。</h4>]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>人间失格</tag>
      </tags>
  </entry>
  <entry>
    <title>人间失格第一手札</title>
    <url>/2019/09/29/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC/%E4%BA%BA%E9%97%B4%E5%A4%B1%E6%A0%BC%E7%AC%AC%E4%B8%80%E6%89%8B%E6%9C%AD/</url>
    <content><![CDATA[<h2 id="我这一生，尽是可耻的过往"><a href="#我这一生，尽是可耻的过往" class="headerlink" title="我这一生，尽是可耻的过往"></a>我这一生，尽是可耻的过往</h2><h4 id="一、表面上我不断地强装出笑脸，可内心里却是对人类拼死拼活的服务，汗流浃背的服务。"><a href="#一、表面上我不断地强装出笑脸，可内心里却是对人类拼死拼活的服务，汗流浃背的服务。" class="headerlink" title="一、表面上我不断地强装出笑脸，可内心里却是对人类拼死拼活的服务，汗流浃背的服务。"></a>一、表面上我不断地强装出笑脸，可内心里却是对人类拼死拼活的服务，汗流浃背的服务。</h4><p>（辛苦的逢迎，背后总有些各样的无奈，当你因为各样原因放下自己的那份身段去强装出那种令人厌恶的姿态时，什么讥笑言语都是过眼云烟罢了。）</p>
<h4 id="二、不公平现象是必然存在的。这一点是明摆着的事实。本来诉诸于人就是徒劳无益的。所以我依旧对真实的事情一言不发，默默忍耐着除了继续扮演滑稽逗笑角色之外已经别无选择。"><a href="#二、不公平现象是必然存在的。这一点是明摆着的事实。本来诉诸于人就是徒劳无益的。所以我依旧对真实的事情一言不发，默默忍耐着除了继续扮演滑稽逗笑角色之外已经别无选择。" class="headerlink" title="二、不公平现象是必然存在的。这一点是明摆着的事实。本来诉诸于人就是徒劳无益的。所以我依旧对真实的事情一言不发，默默忍耐着除了继续扮演滑稽逗笑角色之外已经别无选择。"></a>二、不公平现象是必然存在的。这一点是明摆着的事实。本来诉诸于人就是徒劳无益的。所以我依旧对真实的事情一言不发，默默忍耐着除了继续扮演滑稽逗笑角色之外已经别无选择。</h4><p>（绝对的公平是不存在的，当你因为遭遇了一个不公平待遇而去原地谩骂的时候，你已经陷入这样的泥潭，为何不依靠自己的能力去改变，去证明自己，而麻木于这样的不公平更是可悲的，你的心会随着时间而慢慢变老变枯竭）</p>
<h4 id="三、这仅仅是其中一个微不足道的事例。相互欺骗，却又令人惊奇地不受到任何伤害，甚至于就好像没有察觉到彼此在欺骗似的，这种不加掩饰从而显得清冽、豁达的互不信任的例子，在人类生活中比比皆是。"><a href="#三、这仅仅是其中一个微不足道的事例。相互欺骗，却又令人惊奇地不受到任何伤害，甚至于就好像没有察觉到彼此在欺骗似的，这种不加掩饰从而显得清冽、豁达的互不信任的例子，在人类生活中比比皆是。" class="headerlink" title="三、这仅仅是其中一个微不足道的事例。相互欺骗，却又令人惊奇地不受到任何伤害，甚至于就好像没有察觉到彼此在欺骗似的，这种不加掩饰从而显得清冽、豁达的互不信任的例子，在人类生活中比比皆是。"></a>三、这仅仅是其中一个微不足道的事例。相互欺骗，却又令人惊奇地不受到任何伤害，甚至于就好像没有察觉到彼此在欺骗似的，这种不加掩饰从而显得清冽、豁达的互不信任的例子，在人类生活中比比皆是。</h4><p>（伪装这种东西说绝对的坏也是不恰当的，毕竟在这样一个时代，完全活出自己的模样真的是太困难了，人们往往都活在一个甚至多个角色之中，而当我们习惯这种角色的切换后，一切都变得我理所当然了，包括谎言，欺骗等等，真实这种东西，太奢侈了。。。）</p>
]]></content>
      <categories>
        <category>读书笔记</category>
      </categories>
      <tags>
        <tag>人间失格</tag>
      </tags>
  </entry>
  <entry>
    <title>linux下ss搭建</title>
    <url>/2019/09/29/linux%E4%B8%8Bss%E6%90%AD%E5%BB%BA/</url>
    <content><![CDATA[<h1 id="Linux-Mint配置2（ss科学上网）"><a href="#Linux-Mint配置2（ss科学上网）" class="headerlink" title="Linux Mint配置2（ss科学上网）"></a>Linux Mint配置2（ss科学上网）</h1><h2 id="一-服务器的搭建（VPS）"><a href="#一-服务器的搭建（VPS）" class="headerlink" title="一 . 服务器的搭建（VPS）"></a>一 . 服务器的搭建（VPS）</h2><h3 id="1-在合适的VPS网站上购买VPS（vultr推荐），记住ip，password"><a href="#1-在合适的VPS网站上购买VPS（vultr推荐），记住ip，password" class="headerlink" title="1. 在合适的VPS网站上购买VPS（vultr推荐），记住ip，password"></a>1. 在合适的VPS网站上购买VPS（vultr推荐），记住ip，password</h3><h3 id="2-进入服务器的控制面板（这里也建议通过ssh，因为浏览器进入控制面板的终端很low，曾经被虐的很惨）"><a href="#2-进入服务器的控制面板（这里也建议通过ssh，因为浏览器进入控制面板的终端很low，曾经被虐的很惨）" class="headerlink" title="2. 进入服务器的控制面板（这里也建议通过ssh，因为浏览器进入控制面板的终端很low，曾经被虐的很惨）"></a>2. 进入服务器的控制面板（这里也建议通过ssh，因为浏览器进入控制面板的终端很low，曾经被虐的很惨）</h3><pre><code>  命令格式：ssh root@ip（这里第一次登陆时可能会让你输入用户名和密码，需要你输入你买VPS注册得账号密码）
</code></pre><p><img src="https://cdn-images-1.medium.com/max/1600/0*VK1s3NgNSJKpbvUD.jpg" alt="ssh"></p>
<h3 id="3-输入密码一路回车到出现root-···即可"><a href="#3-输入密码一路回车到出现root-···即可" class="headerlink" title="3. 输入密码一路回车到出现root@···即可"></a>3. 输入密码一路回车到出现root@···即可</h3><h3 id="4-部署服务器端（这里有代码）"><a href="#4-部署服务器端（这里有代码）" class="headerlink" title="4. 部署服务器端（这里有代码）"></a>4. 部署服务器端（这里有代码）</h3><pre><code>1. wget --no-check-certificate https://raw.githubusercontent.com/teddysun/shadowsocks_install/master/shadowsocks.sh
2. chmod +x shadowsocks.sh
3. ./shadowsocks.sh 2&gt;&amp;1 | tee shadowsocks.log
4.  剩下自己按照提示输入就行，结束后回到桌面会发现这个文件
</code></pre><h2 id="二-Linux安装ss并配置开机启动"><a href="#二-Linux安装ss并配置开机启动" class="headerlink" title="二. Linux安装ss并配置开机启动"></a>二. Linux安装ss并配置开机启动</h2><h3 id="1-下载ss"><a href="#1-下载ss" class="headerlink" title="1. 下载ss"></a>1. 下载ss</h3><pre><code>1. sudo apt-get install python-pip //安装pip
2. sudo apt-get install shadowsocks//安装ss
</code></pre><h3 id="2-修改配置文件"><a href="#2-修改配置文件" class="headerlink" title="2. 修改配置文件"></a>2. 修改配置文件</h3><pre><code>1. 在/etc/下创建文件ss.json (名字随意路径也可以自己选择）
2. 编辑配置文件sudo vim /etc/ss.json
</code></pre><figure class="highlight json"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	<span class="attr">"server"</span>:<span class="string">"my_server_ip"</span>,<span class="comment">//代理ip</span></span><br><span class="line">	<span class="attr">"server_port"</span>:my_port,<span class="comment">//代理端口</span></span><br><span class="line">	<span class="attr">"password"</span>:<span class="string">"passwd"</span>,<span class="comment">//密码</span></span><br><span class="line">	<span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span><span class="comment">//没有逗号</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<pre><code>3. 打开终端输入sslocal -c /etc/ss.json（如果不报错打开google测试即可）
</code></pre><h3 id="3-可能出现问题"><a href="#3-可能出现问题" class="headerlink" title="3. 可能出现问题"></a>3. 可能出现问题</h3><figure class="highlight crystal"><table><tr><td class="code"><pre><span class="line">运行sslocal 报错</span><br><span class="line"><span class="symbol">AttributeError:</span> /usr/<span class="class"><span class="keyword">lib</span>/<span class="title">x86_64</span>-<span class="title">Linux</span>-<span class="title">gnu</span>/<span class="title">libcrypto</span>.<span class="title">so</span>.1.1: <span class="title">undefined</span> <span class="title">symbol</span>: <span class="title">EVP_CIPHER_CTX_cleanuphttp</span>://<span class="title">www</span>.<span class="title">cnblogs</span>.<span class="title">com</span>/<span class="title">lzhd24</span>/<span class="title">p</span>/6686803.<span class="title">html</span></span></span><br></pre></td></tr></table></figure>
<pre><code>1. 用vi打开文件：vi /usr/local/lib/python2.7/dist-packages/shadowsocks/crypto/openssl.py
2. 将第52行libcrypto.EVP_CIPHER_CTX_cleanup.argtypes = (c_void_p,) 改为libcrypto.EVP_CIPHER_CTX_reset.argtypes = (c_void_p,)
3. 再次搜索cleanup（全文件共2处，此处位于111行），将libcrypto.EVP_CIPHER_CTX_cleanup(self._ctx) 改为libcrypto.EVP_CIPHER_CTX_reset(self._ctx)
4.保存退出继续运行sslocal -c 命令
</code></pre><h3 id="4-设置开机启动项"><a href="#4-设置开机启动项" class="headerlink" title="4.设置开机启动项"></a>4.设置开机启动项</h3><pre><code>系统有开机启动项设置，这里可以在开机启动项里设置加入启动命令即可（这里rc.local)出现问题，在新版本ubuntu中不执行
</code></pre><h3 id="5-设置终端运行（前面设置的ss不是全局代理，终端无法ping-谷歌）"><a href="#5-设置终端运行（前面设置的ss不是全局代理，终端无法ping-谷歌）" class="headerlink" title="5.设置终端运行（前面设置的ss不是全局代理，终端无法ping 谷歌）"></a>5.设置终端运行（前面设置的ss不是全局代理，终端无法ping 谷歌）</h3><h4 id="1-安装polipo（支持socks6）"><a href="#1-安装polipo（支持socks6）" class="headerlink" title="(1)安装polipo（支持socks6）"></a>(1)安装polipo（支持socks6）</h4><pre><code>sudo apt install polipo
</code></pre><h4 id="2-编辑配置文件，保存到-etc-polipo-config"><a href="#2-编辑配置文件，保存到-etc-polipo-config" class="headerlink" title="(2) 编辑配置文件，保存到/etc/polipo/config"></a>(2) 编辑配置文件，保存到/etc/polipo/config</h4><figure class="highlight ini"><table><tr><td class="code"><pre><span class="line"><span class="comment"># This file only needs to list configuration variables that deviate</span></span><br><span class="line"><span class="comment"># from the default values.  See /usr/share/doc/polipo/examples/config.sample</span></span><br><span class="line"><span class="comment"># and "polipo -v" for variables you can tweak and further information.</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">logSyslog</span> = <span class="literal">true</span></span><br><span class="line"><span class="attr">logFile</span> = /var/log/polipo/polipo.log</span><br><span class="line"> </span><br><span class="line"><span class="attr">proxyAddress</span> = <span class="string">"0.0.0.0"</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">socksParentProxy</span> = <span class="string">"127.0.0.1:1080"</span></span><br><span class="line"><span class="attr">socksProxyType</span> = socks5</span><br><span class="line"> </span><br><span class="line"><span class="attr">chunkHighMark</span> = <span class="number">50331648</span></span><br><span class="line"><span class="attr">objectHighMark</span> = <span class="number">16384</span></span><br><span class="line"> </span><br><span class="line"><span class="attr">serverMaxSlots</span> = <span class="number">64</span></span><br><span class="line"><span class="attr">serverSlots</span> = <span class="number">16</span></span><br><span class="line"><span class="attr">serverSlots1</span> = <span class="number">32</span></span><br></pre></td></tr></table></figure>
<h4 id="3-重启polipo"><a href="#3-重启polipo" class="headerlink" title="(3)重启polipo"></a>(3)重启polipo</h4><pre><code>sudo service polipo restart
curl google.com（看看是否有用）
</code></pre><h4 id="4-添加环境变量，要不然只能这一个终端可以使用（vim-～-bashrc-添加后source-etc-profile-让环境变量立即生效）"><a href="#4-添加环境变量，要不然只能这一个终端可以使用（vim-～-bashrc-添加后source-etc-profile-让环境变量立即生效）" class="headerlink" title="(4)添加环境变量，要不然只能这一个终端可以使用（vim ～/.bashrc)(添加后source /etc/profile 让环境变量立即生效）"></a>(4)添加环境变量，要不然只能这一个终端可以使用（vim ～/.bashrc)(添加后source /etc/profile 让环境变量立即生效）</h4><pre><code>export http_proxy=&quot;http://127.0.0.1:8123&quot;
export https_proxy=&quot;https://127.0.0.1:8123&quot;
</code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux-ss</tag>
      </tags>
  </entry>
  <entry>
    <title>linux双系统安装</title>
    <url>/2019/09/29/linux%E5%8F%8C%E7%B3%BB%E7%BB%9F%E5%AE%89%E8%A3%85/</url>
    <content><![CDATA[<h1 id="Linux-Mint-配置1（GRUB）"><a href="#Linux-Mint-配置1（GRUB）" class="headerlink" title="Linux Mint 配置1（GRUB）"></a>Linux Mint 配置1（GRUB）</h1><hr>
<h2 id="1-删除原来的Linux"><a href="#1-删除原来的Linux" class="headerlink" title="1. 删除原来的Linux"></a>1. 删除原来的Linux</h2><h3 id="一-修复MBR（主引导记录）"><a href="#一-修复MBR（主引导记录）" class="headerlink" title="一 修复MBR（主引导记录）"></a>一 修复MBR（主引导记录）</h3><pre><code>1. 下载MbrFix软件，下载地址为http://www.sysint.no/mbrfix（注意64位）
2. 先右键打开软件以管理员运行，然后cmd进入文件夹输入
3. 输入：32位：MbrFix/drive 0 fixmbr
        64位：MbrFix64/drive 0 fixmbr
4. 输入Y， OK！！！
</code></pre><h3 id="二-删除数据（Ubuntu）"><a href="#二-删除数据（Ubuntu）" class="headerlink" title="二 删除数据（Ubuntu）"></a>二 删除数据（Ubuntu）</h3><pre><code>1. 进入磁盘管理
2. 点击没有名字的分区，删除（就是没有像D：这样的盘符）
3. 重启
</code></pre><h2 id="2-下载需要安装的Linux，使用软件做启动盘（略）"><a href="#2-下载需要安装的Linux，使用软件做启动盘（略）" class="headerlink" title="2. 下载需要安装的Linux，使用软件做启动盘（略）"></a>2. 下载需要安装的Linux，使用软件做启动盘（略）</h2><h2 id="3-GRUB引导（双显卡）"><a href="#3-GRUB引导（双显卡）" class="headerlink" title="3. GRUB引导（双显卡）"></a>3. GRUB引导（双显卡）</h2><pre><code>1. 开机bios先选择u盘启动，然后F10保存进入Linux引导界面
2. 按e编辑grub，到quiet splash 一行，在后面加上nouveau.modeset=0（禁用n卡），然后F10进入安装（也可以删除quiet splash，这样很装逼，你可以看见电脑进程启动记录）
3. 到了分配空间最好选择自动分配，会自动选择你删除的那个盘，然后分区
</code></pre><h2 id="4-修改GRUB"><a href="#4-修改GRUB" class="headerlink" title="4. 修改GRUB"></a>4. 修改GRUB</h2><pre><code>1. sudo vi /etc/default/grub
2. 在quiet splash后面加入nouveau.modeset=0，保存
3. sudo update-grub
</code></pre>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux系统安装</tag>
      </tags>
  </entry>
  <entry>
    <title>回到你面前demo</title>
    <url>/2019/09/28/%E8%8D%92%E6%BC%A0%E7%94%98%E6%B3%89/%E5%9B%9E%E5%88%B0%E4%BD%A0%E9%9D%A2%E5%89%8Ddemo/</url>
    <content><![CDATA[<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">回归了宁静寂静忧愁无尽，</span><br><span class="line">我在想你在想他在想什么。</span><br><span class="line">那种快乐和幸福只是一刻，</span><br><span class="line">走出人群彷徨惆怅留我一个。</span><br><span class="line"></span><br><span class="line">当初的祈祷是献给谁为祭？</span><br><span class="line">当初举手是在谁面前的誓言？</span><br><span class="line">当初的眼泪是音乐的渲染嘛？</span><br><span class="line">当初的宣告为了别人眼光嘛？</span><br><span class="line"></span><br><span class="line">感恩是因为生活富足嘛？</span><br><span class="line">没有了一切热情还会在吗？</span><br><span class="line">困窘逆境还会倾诉嘛？</span><br><span class="line">走出人群还能有信心嘛？</span><br><span class="line"></span><br><span class="line">多么想回到你面前，</span><br><span class="line">脱开难断的锁链，</span><br><span class="line">那些我知道不知道的事，</span><br><span class="line">放心交在你手间。</span><br><span class="line"></span><br><span class="line">万物借你话而创造，</span><br><span class="line">我可以再一次微笑，</span><br><span class="line">靠着你所出的每句话，</span><br><span class="line">我可以回到你面前。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>信仰</category>
        <category>歌词</category>
      </categories>
      <tags>
        <tag>诗歌</tag>
      </tags>
  </entry>
  <entry>
    <title>jupyter notebook 搭建移动代码运行</title>
    <url>/2019/09/28/jupyter-notebook-%E6%90%AD%E5%BB%BA%E7%A7%BB%E5%8A%A8%E4%BB%A3%E7%A0%81%E8%BF%90%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="服务器搭建jupyter-notebook"><a href="#服务器搭建jupyter-notebook" class="headerlink" title="服务器搭建jupyter notebook"></a>服务器搭建jupyter notebook</h1><hr>
<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#先购买一个虚拟服务器、如腾讯的校园服务器</span></span><br><span class="line">pip3 install jupyter</span><br></pre></td></tr></table></figure>
<h2 id="二、生成访问密码"><a href="#二、生成访问密码" class="headerlink" title="二、生成访问密码"></a>二、生成访问密码</h2><p>1.进入服务器python3<br>2.输入<br><figure class="highlight stylus"><table><tr><td class="code"><pre><span class="line">from notebook<span class="selector-class">.auth</span> import passwd</span><br><span class="line"><span class="function"><span class="title">passswd</span><span class="params">()</span></span></span><br><span class="line">#输入密码，重复，复制生成的密文</span><br></pre></td></tr></table></figure></p>
<h2 id="三、修改配置文件"><a href="#三、修改配置文件" class="headerlink" title="三、修改配置文件"></a>三、修改配置文件</h2><figure class="highlight verilog"><table><tr><td class="code"><pre><span class="line">#生成配置文件</span><br><span class="line">jupyter notebook --<span class="keyword">generate</span>-<span class="keyword">config</span></span><br></pre></td></tr></table></figure>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="comment"># 找到下面几项将前面的#去除，并进行相应的修改</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设定ip访问，允许任意ip访问</span></span><br><span class="line">c.NotebookApp.ip = <span class="string">'*'</span></span><br><span class="line"><span class="comment"># 不打开浏览器</span></span><br><span class="line">c.NotebookApp.open_browser = <span class="literal">False</span></span><br><span class="line"><span class="comment"># 用于访问的端口，设定一个不用的端口即可，这里设置为7000</span></span><br><span class="line">c.NotebookApp.port = <span class="number">7000</span></span><br><span class="line"><span class="comment"># 设置登录密码， 将刚刚复制的内容替换此处的xxx</span></span><br><span class="line">c.NotebookApp.password = <span class="string">u'xxx'</span></span><br><span class="line"><span class="comment"># 保存退出即可</span></span><br></pre></td></tr></table></figure>
<h2 id="四、运行jupyter-notebook"><a href="#四、运行jupyter-notebook" class="headerlink" title="四、运行jupyter notebook"></a>四、运行jupyter notebook</h2><figure class="highlight applescript"><table><tr><td class="code"><pre><span class="line"><span class="comment">#可以使用screen运行和ctrl + a + d快捷键</span></span><br><span class="line">jupyter notebook <span class="comment">--allow-root</span></span><br></pre></td></tr></table></figure>
<h2 id="五、浏览器登录"><a href="#五、浏览器登录" class="headerlink" title="五、浏览器登录"></a>五、浏览器登录</h2><p>进入浏览器输入服务器ip+端口号即可</p>
<h2 id="六、ipad使用技巧"><a href="#六、ipad使用技巧" class="headerlink" title="六、ipad使用技巧"></a>六、ipad使用技巧</h2><figure class="highlight mipsasm"><table><tr><td class="code"><pre><span class="line">因为<span class="keyword">jupyter支持远程访问、我们完全可以通过ipad </span>网址加端口号访问，ipad也可以通过termius远程控制应用开启关闭，具体参考上一节</span><br></pre></td></tr></table></figure>
<h2 id="七、可能遇到的问题"><a href="#七、可能遇到的问题" class="headerlink" title="七、可能遇到的问题"></a>七、可能遇到的问题</h2><figure class="highlight mel"><table><tr><td class="code"><pre><span class="line">有些服务器没有安装<span class="keyword">python</span>或者pip，百度安装</span><br><span class="line"></span><br><span class="line">pip更新</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>linux</category>
      </categories>
      <tags>
        <tag>linux</tag>
      </tags>
  </entry>
</search>
